From 48d7ff699dcf948f35940be2ac475e0ed644df56 Mon Sep 17 00:00:00 2001
From: Alex Belits <alex.belits@cavium.com>
Date: Mon, 15 May 2017 18:05:06 -0700
Subject: [PATCH 354/375] task_isolation: Disable timers on cores running
 isolated tasks.

Signed-off-by: Alex Belits <Alex.Belits@cavium.com>
---
 kernel/sched/core.c | 24 ++++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 839b1d068525..c4ec73b40354 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -76,6 +76,7 @@
 #include <linux/frame.h>
 #include <linux/prefetch.h>
 #include <linux/isolation.h>
+#include <linux/debugfs.h>
 
 #include <asm/switch_to.h>
 #include <asm/tlb.h>
@@ -3098,10 +3099,13 @@ void scheduler_tick(void)
 }
 
 #ifdef CONFIG_NO_HZ_FULL
+static u32 sched_tick_max_deferment = HZ;
+
 /**
  * scheduler_tick_max_deferment
  *
- * Keep at least one tick per second when a single
+ * Keep at least one tick per second (or whatever is set
+ * as sched_tick_max_deferment value) when a single
  * active task is running because the scheduler doesn't
  * yet completely support full dynticks environment.
  *
@@ -3109,6 +3113,9 @@ void scheduler_tick(void)
  * balancing, etc... continue to move forward, even
  * with a very low granularity.
  *
+ * For isolated tasks or when sched_tick_max_deferment is
+ * set to -1, return KTIME_MAX.
+ *
  * Return: Maximum deferment in nanoseconds.
  */
 u64 scheduler_tick_max_deferment(void)
@@ -3116,13 +3123,26 @@ u64 scheduler_tick_max_deferment(void)
 	struct rq *rq = this_rq();
 	unsigned long next, now = READ_ONCE(jiffies);
 
-	next = rq->last_sched_tick + HZ;
+	if ((sched_tick_max_deferment == -1)
+	    || test_thread_flag(TIF_TASK_ISOLATION))
+		return KTIME_MAX;
+
+	next = rq->last_sched_tick + sched_tick_max_deferment;
 
 	if (time_before_eq(next, now))
 		return 0;
 
 	return jiffies_to_nsecs(next - now);
 }
+
+static __init int sched_nohz_full_init_debug(void)
+{
+	debugfs_create_u32("sched_tick_max_deferment", 0644, NULL,
+			   &sched_tick_max_deferment);
+
+	return 0;
+}
+late_initcall(sched_nohz_full_init_debug);
 #endif
 
 #if defined(CONFIG_PREEMPT) && (defined(CONFIG_DEBUG_PREEMPT) || \
-- 
2.14.1

