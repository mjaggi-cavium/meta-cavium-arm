From a36d9a66757fe5f3fdabf4f7009f7bfc4fbe9772 Mon Sep 17 00:00:00 2001
From: Angela Czubak <aczubak@caviumnetworks.com>
Date: Fri, 16 Mar 2018 13:05:42 +0100
Subject: [PATCH 273/375] octeontx-pki: implement MBOX_PKI_PORT_*_QPG

Messages implemented include:
- MBOX_PKI_PORT_ALLOC_QPG
- MBOX_PKI_PORT_FREE_QPG

pki_port_create_qos does not allocate QPGs if port has them assigned by
MBOX_PKI_PORT_ALLOC_QPG. QPG entries of a port  must be freed in order to
allocate a different number of QPGs for it.

Signed-off-by: Angela Czubak <aczubak@caviumnetworks.com>
---
 drivers/net/ethernet/cavium/octeontx-83xx/pki.h    |  4 +
 .../net/ethernet/cavium/octeontx-83xx/pki_config.c | 96 ++++++++++++++++++++--
 .../net/ethernet/cavium/octeontx-83xx/pki_main.c   |  8 ++
 3 files changed, 100 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pki.h b/drivers/net/ethernet/cavium/octeontx-83xx/pki.h
index 2e4aa206463b..93b2ecb4f3ed 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pki.h
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pki.h
@@ -523,6 +523,10 @@ void init_styles(struct pki_t *pki);
 int pki_port_open(struct pkipf_vf *vf, u16 vf_id, mbox_pki_port_t *port_data);
 int pki_port_create_qos(struct pkipf_vf *vf, u16 vf_id,
 			mbox_pki_qos_cfg_t *qcfg);
+int pki_port_alloc_qpg(struct pkipf_vf *vf, u16 vf_id,
+		       struct mbox_pki_port_qpg_attr *qpg_attr);
+int pki_port_free_qpg(struct pkipf_vf *vf, u16 vf_id,
+		      struct mbox_pki_port_qpg_attr *qpg_attr);
 int pki_port_start(struct pkipf_vf *vf, u16 vf_id, mbox_pki_port_t *port_data);
 int pki_port_stop(struct pkipf_vf *vf, u16 vf_id, mbox_pki_port_t *port_data);
 int pki_port_close(struct pkipf_vf *vf, u16 vf_id, mbox_pki_port_t *port_data);
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c b/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
index 42efde6f533b..d4a22cedcf71 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
@@ -264,12 +264,87 @@ int pki_port_open(struct pkipf_vf *vf, u16 vf_id,
 
 	port->state = PKI_PORT_OPEN;
 	port->qpg_base = QPG_INVALID;
+	port->num_entry = 0;
 	cfg = pki_reg_read(pki, PKI_FRM_LEN_CHKX(0));
 	port->min_frame_len = cfg & 0xff;
 	port->max_frame_len = (cfg >> 15) & 0xff;
 	return MBOX_RET_SUCCESS;
 }
 
+int pki_port_alloc_qpg(struct pkipf_vf *vf, u16 vf_id,
+		       struct mbox_pki_port_qpg_attr *qpg_attr)
+{
+	struct pki_port *port;
+	int qpg_base;
+	int ret = MBOX_RET_INVALID;
+
+	switch (qpg_attr->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		goto exit;
+	}
+
+	if ((port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP))
+		return MBOX_RET_INVALID;
+
+	/* Do not allocate QPGs if there are ones already allocated */
+	if (port->qpg_base != QPG_INVALID || port->num_entry != 0)
+		goto exit;
+
+	qpg_base = qpg_range_alloc(vf->pki, qpg_attr->qpg_num,
+				   vf->domain.domain_id);
+
+	if (qpg_base != QPG_INVALID) {
+		qpg_attr->qpg_base = qpg_base;
+		port->qpg_base = qpg_base;
+		port->num_entry = qpg_attr->qpg_num;
+		ret = MBOX_RET_SUCCESS;
+	}
+exit:
+	return ret;
+}
+
+int pki_port_free_qpg(struct pkipf_vf *vf, u16 vf_id,
+		      struct mbox_pki_port_qpg_attr *qpg_attr)
+{
+	struct pki_port *port;
+	int ret = MBOX_RET_INVALID;
+
+	switch (qpg_attr->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		goto exit;
+	}
+
+	if ((port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP))
+		return MBOX_RET_INVALID;
+
+	/* Do not free QPGs if not all will be released */
+	if (port->qpg_base != qpg_attr->qpg_base ||
+	    port->num_entry != qpg_attr->qpg_num)
+		goto exit;
+
+	if (qpg_range_free(vf->pki, qpg_attr->qpg_base, qpg_attr->qpg_num,
+			   vf->domain.domain_id) < 0)
+		goto exit;
+
+	port->qpg_base = QPG_INVALID;
+	port->num_entry = 0;
+	ret = MBOX_RET_SUCCESS;
+exit:
+	return ret;
+}
+
 int pki_port_create_qos(struct pkipf_vf *vf, u16 vf_id,
 			mbox_pki_qos_cfg_t *qcfg)
 {
@@ -291,16 +366,21 @@ int pki_port_create_qos(struct pkipf_vf *vf, u16 vf_id,
 	default:
 		return MBOX_RET_INVALID;
 	}
-	if ((port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP) ||
-	    port->qpg_base != QPG_INVALID)
+	if ((port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP))
 		return MBOX_RET_INVALID;
 	style = port->init_style;
-	/* TO_DO add support for alloc qpg, for now use pkind*64 */
-	qpg_base = qpg_range_alloc(pki, qcfg->num_entry, vf->domain.domain_id);
-	if (qpg_base == QPG_INVALID)
-		return MBOX_RET_INVALID;
-	port->qpg_base = qpg_base;
-	port->num_entry = qcfg->num_entry;
+	if (port->qpg_base == QPG_INVALID) {
+		qpg_base = qpg_range_alloc(pki, qcfg->num_entry,
+					   vf->domain.domain_id);
+		if (qpg_base == QPG_INVALID)
+			return MBOX_RET_INVALID;
+		port->qpg_base = qpg_base;
+		port->num_entry = qcfg->num_entry;
+	} else {
+		if (port->num_entry < qcfg->num_entry)
+			return MBOX_RET_INVALID;
+		qpg_base = port->qpg_base;
+	}
 	for (i = 0; i < pki->max_cls; i++) {
 		cfg = pki_reg_read(pki, PKI_CLX_STYLEX_ALG(i, style));
 		set_field(&cfg, PKI_STYLE_ALG_QPG_QOS_MASK,
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
index 91262cf9c031..664d5aad4e8f 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pki_main.c
@@ -568,6 +568,14 @@ static int pki_receive_message(u32 id, u16 domain_id,
 		hdr->res_code = pki_port_create_qos(vf, hdr->vfid,
 						    mdata);
 		break;
+	case MBOX_PKI_PORT_ALLOC_QPG:
+		hdr->res_code = pki_port_alloc_qpg(vf, hdr->vfid,
+						   mdata);
+		break;
+	case MBOX_PKI_PORT_FREE_QPG:
+		hdr->res_code = pki_port_free_qpg(vf, hdr->vfid,
+						  mdata);
+		break;
 	case MBOX_PKI_PORT_START:
 		hdr->res_code = pki_port_start(vf, hdr->vfid, mdata);
 		break;
-- 
2.14.1

