From b564a2c5967d042253ec0e828f69dcd28ac59461 Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Date: Tue, 9 Jan 2018 11:37:55 +0100
Subject: [PATCH 287/375] crypto: cpt - move domain code to separate file

We want to keep all code which will not be upstreamed in separate files
because CPT driver version for upstreaming is kept in cpt-driver repo.
In order to be able to port changes between CPT drivers in cpt-driver
and kernel repos we want them to be as much common as possible.

Signed-off-by: Lukasz Bartosik <lukasz.bartosik@cavium.com>
---
 drivers/crypto/cavium/cpt/Makefile       |   2 +-
 drivers/crypto/cavium/cpt/cptpf_domain.c | 214 +++++++++++++++++++++++++++++++
 drivers/crypto/cavium/cpt/cptpf_main.c   | 205 +----------------------------
 3 files changed, 217 insertions(+), 204 deletions(-)
 create mode 100644 drivers/crypto/cavium/cpt/cptpf_domain.c

diff --git a/drivers/crypto/cavium/cpt/Makefile b/drivers/crypto/cavium/cpt/Makefile
index c32c24e30111..bc70f41fcb18 100644
--- a/drivers/crypto/cavium/cpt/Makefile
+++ b/drivers/crypto/cavium/cpt/Makefile
@@ -1,4 +1,4 @@
 obj-$(CONFIG_CRYPTO_DEV_CPT) += cptpf.o cptvf.o
-cptpf-objs := cptpf_main.o cptpf_mbox.o
+cptpf-objs := cptpf_main.o cptpf_mbox.o cptpf_domain.o
 cptvf-objs := cptvf_main.o cptvf_reqmanager.o cptvf_mbox.o cptvf_algs.o
 ccflags-y := -I$(src)/../../../net/ethernet/cavium/octeontx-83xx/
diff --git a/drivers/crypto/cavium/cpt/cptpf_domain.c b/drivers/crypto/cavium/cpt/cptpf_domain.c
new file mode 100644
index 000000000000..61fb8681b788
--- /dev/null
+++ b/drivers/crypto/cavium/cpt/cptpf_domain.c
@@ -0,0 +1,214 @@
+/*
+ * Copyright (C) 2017 Cavium, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License
+ * as published by the Free Software Foundation.
+ */
+
+#include "cptpf.h"
+#include "cpt.h"
+
+extern struct mutex octeontx_cpt_devices_lock;
+extern struct list_head octeontx_cpt_devices;
+
+static void identify(struct cptpf_vf *vf, u16 domain_id, u16 subdomain_id)
+{
+	u64 reg = (((u64)subdomain_id << 16) | (domain_id)) << 8;
+
+	writeq(reg, vf->domain.reg_base + CPTX_VQX_SADDR(0, 0));
+}
+
+static void cpt_config_gmctl(struct cpt_device *cpt, uint8_t vq,
+			     uint8_t strm, uint16_t gmid)
+{
+	union cptx_pf_qx_gmctl gmctl = {0};
+
+	gmctl.s.strm = strm;
+	gmctl.s.gmid = gmid;
+	writeq(gmctl.u, cpt->reg_base + CPTX_PF_QX_GMCTL(0, vq));
+}
+
+static int cpt_pf_remove_domain(u32 node, u16 domain_id, struct kobject *kobj)
+{
+	struct cpt_device *cpt = NULL;
+	struct cpt_device *curr;
+	struct pci_dev *virtfn;
+	struct cptpf_vf *vf;
+	int i, vf_idx = 0;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr->node == node && curr->pf_type == CPT_SE_83XX) {
+			cpt = curr;
+			break;
+		}
+	}
+
+	if (!cpt) {
+		mutex_unlock(&octeontx_cpt_devices_lock);
+		return -ENODEV;
+	}
+
+	for (i = 0; i < cpt->vfs_enabled; i++) {
+		vf = &cpt->vf[i];
+		if (vf->domain.in_use &&
+		    vf->domain.domain_id == domain_id) {
+			virtfn = pci_get_domain_bus_and_slot(
+				     pci_domain_nr(cpt->pdev->bus),
+				     pci_iov_virtfn_bus(cpt->pdev, i),
+				     pci_iov_virtfn_devfn(cpt->pdev, i));
+
+			if (virtfn && kobj)
+				sysfs_remove_link(kobj, virtfn->dev.kobj.name);
+
+			/* Release the VF to PF */
+			cpt_config_gmctl(cpt, i, 0, 0);
+			identify(vf, 0x0, 0x0);
+			dev_info(&cpt->pdev->dev, "Free vf[%d] from domain_id:%d subdomain_id:%d\n",
+				 i, vf->domain.domain_id, vf_idx);
+			iounmap(vf->domain.reg_base);
+			vf->domain.in_use = false;
+			memset(vf, 0, sizeof(struct cptpf_vf));
+			vf_idx++;
+		}
+	}
+
+	cpt->vfs_in_use -= vf_idx;
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return 0;
+}
+
+static int cpt_pf_create_domain(u32 node, u16 domain_id,
+				u32 num_vfs, struct kobject *kobj)
+{
+	struct cpt_device *cpt = NULL;
+	struct cpt_device *curr;
+	struct pci_dev *virtfn;
+	struct cptpf_vf *vf;
+	resource_size_t vf_start;
+	int vf_idx = 0, ret = 0;
+	int i;
+
+	if (!kobj)
+		return -EINVAL;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr->node == node && curr->pf_type == CPT_SE_83XX) {
+			cpt = curr;
+			break;
+		}
+	}
+
+	if (!cpt) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+
+	for (i = 0; i < cpt->vfs_enabled; i++) {
+		vf = &cpt->vf[i];
+		if (vf->domain.in_use)
+			continue;
+
+		virtfn = pci_get_domain_bus_and_slot(
+					pci_domain_nr(cpt->pdev->bus),
+					pci_iov_virtfn_bus(cpt->pdev, i),
+					pci_iov_virtfn_devfn(cpt->pdev, i));
+		if (!virtfn)
+			break;
+
+		ret = sysfs_create_link(kobj, &virtfn->dev.kobj,
+					virtfn->dev.kobj.name);
+		if (ret < 0)
+			goto err_unlock;
+
+		vf_start = pci_resource_start(cpt->pdev, PCI_CPT_PF_CFG_BAR);
+
+		vf_start += CPT_BAR_E_CPTX_VFX_BAR0_OFFSET(node, i);
+		vf->domain.reg_base = ioremap(vf_start,
+					      CPT_BAR_E_CPTX_VFX_BAR0_SIZE);
+		if (!vf->domain.reg_base) {
+			ret = -ENOMEM;
+			goto err_unlock;
+		}
+		vf->domain.domain_id = domain_id;
+		vf->domain.subdomain_id = vf_idx;
+		vf->domain.gmid = get_gmid(domain_id);
+		vf->domain.in_use = true;
+
+		cpt_config_gmctl(cpt, i, i + 1, vf->domain.gmid);
+		identify(vf, domain_id, vf_idx);
+
+		vf_idx++;
+		if (vf_idx == num_vfs) {
+			cpt->vfs_in_use += num_vfs;
+			break;
+		}
+	}
+
+	if (vf_idx != num_vfs) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return ret;
+
+err_unlock:
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	cpt_pf_remove_domain(node, domain_id, kobj);
+	return ret;
+}
+
+static int cpt_reset_domain(u32 node, u16 domain_id)
+{
+	struct cpt_device *cpt = NULL;
+	struct cpt_device *curr;
+	struct cptpf_vf *vf;
+	u64 inflight = 0;
+	int i, ret;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr->node == node && curr->pf_type == CPT_SE_83XX) {
+			cpt = curr;
+			break;
+		}
+	}
+
+	if (!cpt) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+
+	for (i = 0; i < cpt->vfs_enabled; i++) {
+		vf = &cpt->vf[i];
+		if (vf->domain.in_use &&
+		    vf->domain.domain_id == domain_id) {
+
+			/* Wait till the VQ is empty */
+			inflight = readq(vf->domain.reg_base +
+					 CPTX_VQX_INPROG(0, 0));
+			while (inflight != 0) {
+				inflight = readq(vf->domain.reg_base +
+						 CPTX_VQX_INPROG(0, 0));
+			}
+
+			identify(vf, domain_id, vf->domain.subdomain_id);
+		}
+	}
+
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return 0;
+
+err_unlock:
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return ret;
+}
+
+struct cptpf_com_s cptpf_com = {
+	.create_domain = cpt_pf_create_domain,
+	.destroy_domain = cpt_pf_remove_domain,
+	.reset_domain = cpt_reset_domain
+};
+EXPORT_SYMBOL(cptpf_com);
diff --git a/drivers/crypto/cavium/cpt/cptpf_main.c b/drivers/crypto/cavium/cpt/cptpf_main.c
index b1f62273e375..b88518a60d4d 100644
--- a/drivers/crypto/cavium/cpt/cptpf_main.c
+++ b/drivers/crypto/cavium/cpt/cptpf_main.c
@@ -16,7 +16,6 @@
 #include <linux/version.h>
 
 #include "cptpf.h"
-#include "cpt.h"
 
 #define DRV_NAME	"thunder-cpt"
 #define DRV_VERSION	"1.0"
@@ -24,8 +23,8 @@
 static atomic_t cpt_se_count = ATOMIC_INIT(0);
 static atomic_t cpt_ae_count = ATOMIC_INIT(0);
 
-static DEFINE_MUTEX(octeontx_cpt_devices_lock);
-static LIST_HEAD(octeontx_cpt_devices);
+DEFINE_MUTEX(octeontx_cpt_devices_lock);
+LIST_HEAD(octeontx_cpt_devices);
 
 /*
  * Disable cores specified by coremask
@@ -540,206 +539,6 @@ static void cpt_unregister_interrupts(struct cpt_device *cpt)
 	pci_disable_msix(cpt->pdev);
 }
 
-static void cpt_config_gmctl(struct cpt_device *cpt, uint8_t vq,
-			     uint8_t strm, uint16_t gmid)
-{
-	union cptx_pf_qx_gmctl gmctl = {0};
-
-	gmctl.s.strm = strm;
-	gmctl.s.gmid = gmid;
-	writeq(gmctl.u, cpt->reg_base + CPTX_PF_QX_GMCTL(0, vq));
-}
-
-static void identify(struct cptpf_vf *vf, u16 domain_id, u16 subdomain_id)
-{
-	u64 reg = (((u64)subdomain_id << 16) | (domain_id)) << 8;
-
-	writeq(reg, vf->domain.reg_base + CPTX_VQX_SADDR(0, 0));
-}
-
-static int cpt_pf_remove_domain(u32 id, u16 domain_id, struct kobject *kobj)
-{
-	struct cpt_device *cpt = NULL;
-	struct cpt_device *curr;
-	struct pci_dev *virtfn;
-	struct cptpf_vf *vf;
-	int i, vf_idx = 0;
-
-	mutex_lock(&octeontx_cpt_devices_lock);
-	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
-		if (curr->node == id && curr->pf_type == CPT_SE_83XX) {
-			cpt = curr;
-			break;
-		}
-	}
-
-	if (!cpt) {
-		mutex_unlock(&octeontx_cpt_devices_lock);
-		return -ENODEV;
-	}
-
-	for (i = 0; i < cpt->vfs_enabled; i++) {
-		vf = &cpt->vf[i];
-		if (vf->domain.in_use &&
-		    vf->domain.domain_id == domain_id) {
-			virtfn = pci_get_domain_bus_and_slot(
-				     pci_domain_nr(cpt->pdev->bus),
-				     pci_iov_virtfn_bus(cpt->pdev, i),
-				     pci_iov_virtfn_devfn(cpt->pdev, i));
-
-			if (virtfn && kobj)
-				sysfs_remove_link(kobj, virtfn->dev.kobj.name);
-
-			/* Release the VF to PF */
-			cpt_config_gmctl(cpt, i, 0, 0);
-			identify(vf, 0x0, 0x0);
-			dev_info(&cpt->pdev->dev, "Free vf[%d] from domain_id:%d subdomain_id:%d\n",
-				 i, vf->domain.domain_id, vf_idx);
-			iounmap(vf->domain.reg_base);
-			vf->domain.in_use = false;
-			memset(vf, 0, sizeof(struct cptpf_vf));
-			vf_idx++;
-		}
-	}
-
-	cpt->vfs_in_use -= vf_idx;
-	mutex_unlock(&octeontx_cpt_devices_lock);
-	return 0;
-}
-
-static int cpt_pf_create_domain(u32 id, u16 domain_id,
-				u32 num_vfs, struct kobject *kobj)
-{
-	struct cpt_device *cpt = NULL;
-	struct cpt_device *curr;
-	struct pci_dev *virtfn;
-	struct cptpf_vf *vf;
-	resource_size_t vf_start;
-	int vf_idx = 0, ret = 0;
-	int i;
-
-	if (!kobj)
-		return -EINVAL;
-
-	mutex_lock(&octeontx_cpt_devices_lock);
-	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
-		if (curr->node == id && curr->pf_type == CPT_SE_83XX) {
-			cpt = curr;
-			break;
-		}
-	}
-
-	if (!cpt) {
-		ret = -ENODEV;
-		goto err_unlock;
-	}
-
-	for (i = 0; i < cpt->vfs_enabled; i++) {
-		vf = &cpt->vf[i];
-		if (vf->domain.in_use)
-			continue;
-
-		virtfn = pci_get_domain_bus_and_slot(
-					pci_domain_nr(cpt->pdev->bus),
-					pci_iov_virtfn_bus(cpt->pdev, i),
-					pci_iov_virtfn_devfn(cpt->pdev, i));
-		if (!virtfn)
-			break;
-
-		ret = sysfs_create_link(kobj, &virtfn->dev.kobj,
-					virtfn->dev.kobj.name);
-		if (ret < 0)
-			goto err_unlock;
-
-		vf_start = pci_resource_start(cpt->pdev, PCI_CPT_PF_CFG_BAR);
-
-		vf_start += CPT_BAR_E_CPTX_VFX_BAR0_OFFSET(id, i);
-		vf->domain.reg_base = ioremap(vf_start,
-					      CPT_BAR_E_CPTX_VFX_BAR0_SIZE);
-		if (!vf->domain.reg_base) {
-			ret = -ENOMEM;
-			goto err_unlock;
-		}
-		vf->domain.domain_id = domain_id;
-		vf->domain.subdomain_id = vf_idx;
-		vf->domain.gmid = get_gmid(domain_id);
-		vf->domain.in_use = true;
-
-		cpt_config_gmctl(cpt, i, i + 1, vf->domain.gmid);
-		identify(vf, domain_id, vf_idx);
-
-		vf_idx++;
-		if (vf_idx == num_vfs) {
-			cpt->vfs_in_use += num_vfs;
-			break;
-		}
-	}
-
-	if (vf_idx != num_vfs) {
-		ret = -ENODEV;
-		goto err_unlock;
-	}
-	mutex_unlock(&octeontx_cpt_devices_lock);
-	return ret;
-
-err_unlock:
-	mutex_unlock(&octeontx_cpt_devices_lock);
-	cpt_pf_remove_domain(id, domain_id, kobj);
-	return ret;
-}
-
-static int cpt_reset_domain(u32 id, u16 domain_id)
-{
-	struct cpt_device *cpt = NULL;
-	struct cpt_device *curr;
-	struct cptpf_vf *vf;
-	u64 inflight = 0;
-	int i, ret;
-
-	mutex_lock(&octeontx_cpt_devices_lock);
-	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
-		if (curr->node == id && curr->pf_type == CPT_SE_83XX) {
-			cpt = curr;
-			break;
-		}
-	}
-
-	if (!cpt) {
-		ret = -ENODEV;
-		goto err_unlock;
-	}
-
-	for (i = 0; i < cpt->vfs_enabled; i++) {
-		vf = &cpt->vf[i];
-		if (vf->domain.in_use &&
-		    vf->domain.domain_id == domain_id) {
-
-			/* Wait till the VQ is empty */
-			inflight = readq(vf->domain.reg_base +
-					 CPTX_VQX_INPROG(0, 0));
-			while (inflight != 0) {
-				inflight = readq(vf->domain.reg_base +
-						 CPTX_VQX_INPROG(0, 0));
-			}
-
-			identify(vf, domain_id, vf->domain.subdomain_id);
-		}
-	}
-
-	mutex_unlock(&octeontx_cpt_devices_lock);
-	return 0;
-
-err_unlock:
-	mutex_unlock(&octeontx_cpt_devices_lock);
-	return ret;
-}
-
-struct cptpf_com_s cptpf_com = {
-	.create_domain = cpt_pf_create_domain,
-	.destroy_domain = cpt_pf_remove_domain,
-	.reset_domain = cpt_reset_domain
-};
-EXPORT_SYMBOL(cptpf_com);
 
 static int cpt_sriov_configure(struct pci_dev *pdev, int numvfs)
 {
-- 
2.14.1

