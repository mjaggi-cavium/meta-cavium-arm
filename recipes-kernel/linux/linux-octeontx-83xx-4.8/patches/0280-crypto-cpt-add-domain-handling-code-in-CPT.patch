From 4e0f37b779e4f1162ce1e14e5467aab772cc390b Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Date: Tue, 9 Jan 2018 11:37:46 +0100
Subject: [PATCH 280/375] crypto: cpt - add domain handling code in CPT

Port domain creation/deletion code to CPT driver from file
cpt_domain.c located in cpt-sdk repo, 'commit 46dd71d93c7a
("CPT domain module changes for GA 6.2p1")'.

Signed-off-by: Lukasz Bartosik <lukasz.bartosik@cavium.com>
---
 drivers/crypto/cavium/cpt/Makefile       |   1 +
 drivers/crypto/cavium/cpt/cpt_hw_types.h |  45 +++++++
 drivers/crypto/cavium/cpt/cptpf.h        |  16 +--
 drivers/crypto/cavium/cpt/cptpf_main.c   | 198 +++++++++++++++++++++++++++----
 4 files changed, 228 insertions(+), 32 deletions(-)

diff --git a/drivers/crypto/cavium/cpt/Makefile b/drivers/crypto/cavium/cpt/Makefile
index afa3a67c5ba7..c32c24e30111 100644
--- a/drivers/crypto/cavium/cpt/Makefile
+++ b/drivers/crypto/cavium/cpt/Makefile
@@ -1,3 +1,4 @@
 obj-$(CONFIG_CRYPTO_DEV_CPT) += cptpf.o cptvf.o
 cptpf-objs := cptpf_main.o cptpf_mbox.o
 cptvf-objs := cptvf_main.o cptvf_reqmanager.o cptvf_mbox.o cptvf_algs.o
+ccflags-y := -I$(src)/../../../net/ethernet/cavium/octeontx-83xx/
diff --git a/drivers/crypto/cavium/cpt/cpt_hw_types.h b/drivers/crypto/cavium/cpt/cpt_hw_types.h
index cf7edcd865a8..49898dc10ad5 100644
--- a/drivers/crypto/cavium/cpt/cpt_hw_types.h
+++ b/drivers/crypto/cavium/cpt/cpt_hw_types.h
@@ -11,6 +11,18 @@
 
 #include "cpt_common.h"
 
+/* Configuration and Status registers are in BAR 0 */
+#define PCI_CPT_PF_CFG_BAR	0
+
+#define CPT_BAR_E_CPTX_VFX_BAR0_OFFSET(a, b) \
+	(0x000020000000ll + 0x1000000000ll * (a) + 0x100000ll * (b))
+#define CPT_BAR_E_CPTX_VFX_BAR0_SIZE	0x400000
+
+/*
+ * Maximum number of AE and SE VFs
+ */
+#define CPT_MAX_VF_NUM	64
+
 /**
  * Enumeration cpt_comp_e
  *
@@ -656,4 +668,37 @@ union cptx_vqx_ctl {
 #endif /* Word 0 - End */
 	} s;
 };
+
+/**
+ * Register (NCB) cpt#_pf_q#_gmctl
+ *
+ * CPT Queue Guest Machine Control Register
+ * This register configures queues. This register should be changed only when
+ * quiescent, (see CPT()_VQ()_INPROG[INFLIGHT]).
+ *
+ * Word0
+ *  [23:16](R/W) Low 8 bits of the SMMU stream identifier to use when issuing
+ *  requests. Stream 0x0 corresponds to the PF, and VFs start at 0x1.
+ *  Reset such that VF0/index 0 is 0x1, VF1/index 1 is 0x2, etc.
+ *  Maximum legal value is 64.
+ *  [15:0](R/W) Guest machine identifier. The GMID to send to FPA for all
+ *  buffer free, or to SSO for all submit work operations initiated by this
+ *  queue. Must be nonzero or FPA/SSO will drop requests; see FPA_PF_MAP()
+ *  and SSO_PF_MAP().
+ */
+union cptx_pf_qx_gmctl {
+	u64 u;
+	struct cptx_pf_qx_gmctl_s {
+#if defined(__BIG_ENDIAN_BITFIELD) /* Word 0 - Big Endian */
+		uint64_t reserved_24_63		: 40;
+		uint64_t strm				: 8;
+		uint64_t gmid				: 16;
+#else /* Word 0 - Little Endian */
+		uint64_t gmid				: 16;
+		uint64_t strm				: 8;
+		uint64_t reserved_24_63		: 40;
+#endif /* Word 0 - End */
+	} s;
+};
+
 #endif /*__CPT_HW_TYPES_H*/
diff --git a/drivers/crypto/cavium/cpt/cptpf.h b/drivers/crypto/cavium/cpt/cptpf.h
index 4f91c612dbd4..3703c502e930 100644
--- a/drivers/crypto/cavium/cpt/cptpf.h
+++ b/drivers/crypto/cavium/cpt/cptpf.h
@@ -9,6 +9,7 @@
 #ifndef __CPTPF_H
 #define __CPTPF_H
 
+#include "octeontx.h"
 #include "cpt_common.h"
 
 #define CSR_DELAY 30
@@ -39,21 +40,22 @@ struct microcode {
 	void *code;
 };
 
-struct cpt_vf_info {
-	u8 state;
-	u8 priority;
-	u8 id;
-	u32 qlen;
+struct cptpf_vf {
+	struct octeontx_pf_vf domain;
 };
 
 /**
  * cpt device structure
  */
 struct cpt_device {
+	struct cptpf_vf vf[CPT_MAX_VF_NUM]; /* Per VF info */
+	struct list_head list;
 	u16 flags;	/* Flags to hold device status bits */
-	u8 num_vf_en;	/* Number of VFs enabled (0...CPT_MAX_VF_NUM) */
+	u8 num_vf_en; /* Number of VFs enabled (0...CPT_MAX_VF_NUM) */
 	u8 max_vfs;	/* Maximum number of VQs supported by the CPT */
-	u8 pf_type;     /* PF type 81xx, 83xx_SE or 83xx_AE */
+	u8 pf_type; /* PF type 83xx_SE or 83xx_AE */
+	int vfs_in_use;
+	int node;
 
 	void __iomem *reg_base; /* Register start address */
 	struct pci_dev *pdev; /* pci device handle */
diff --git a/drivers/crypto/cavium/cpt/cptpf_main.c b/drivers/crypto/cavium/cpt/cptpf_main.c
index 9c3b5e57300c..d7efbe3eacd3 100644
--- a/drivers/crypto/cavium/cpt/cptpf_main.c
+++ b/drivers/crypto/cavium/cpt/cptpf_main.c
@@ -16,10 +16,17 @@
 #include <linux/version.h>
 
 #include "cptpf.h"
+#include "cpt.h"
 
 #define DRV_NAME	"thunder-cpt"
 #define DRV_VERSION	"1.0"
 
+static atomic_t cpt_se_count = ATOMIC_INIT(0);
+static atomic_t cpt_ae_count = ATOMIC_INIT(0);
+
+static DEFINE_MUTEX(octeontx_cpt_devices_lock);
+static LIST_HEAD(octeontx_cpt_devices);
+
 /*
  * Disable cores specified by coremask
  */
@@ -563,6 +570,151 @@ static int cpt_sriov_init(struct cpt_device *cpt)
 	return 0;
 }
 
+static void cpt_config_gmctl(struct cpt_device *cpt, uint8_t vq,
+			     uint8_t strm, uint16_t gmid)
+{
+	union cptx_pf_qx_gmctl gmctl = {0};
+
+	gmctl.s.strm = strm;
+	gmctl.s.gmid = gmid;
+	writeq(gmctl.u, cpt->reg_base + CPTX_PF_QX_GMCTL(0, vq));
+}
+
+static int cpt_pf_remove_domain(u32 id, u16 domain_id, struct kobject *kobj)
+{
+	struct cpt_device *cpt = NULL;
+	struct cpt_device *curr;
+	struct pci_dev *virtfn;
+	struct cptpf_vf *vf;
+	int i, vf_idx = 0;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr->node == id && curr->pf_type == CPT_SE_83XX) {
+			cpt = curr;
+			break;
+		}
+	}
+
+	if (!cpt) {
+		mutex_unlock(&octeontx_cpt_devices_lock);
+		return -ENODEV;
+	}
+
+	for (i = 0; i < cpt->max_vfs; i++) {
+		vf = &cpt->vf[i];
+		if (vf->domain.in_use &&
+		    vf->domain.domain_id == domain_id) {
+			virtfn = pci_get_domain_bus_and_slot(
+				     pci_domain_nr(cpt->pdev->bus),
+				     pci_iov_virtfn_bus(cpt->pdev, i),
+				     pci_iov_virtfn_devfn(cpt->pdev, i));
+
+			if (virtfn && kobj)
+				sysfs_remove_link(kobj, virtfn->dev.kobj.name);
+
+			/* Release the VF to PF */
+			cpt_config_gmctl(cpt, i, 0, 0);
+			dev_info(&cpt->pdev->dev, "Free vf[%d] from domain_id:%d subdomain_id:%d\n",
+				 i, vf->domain.domain_id, vf_idx);
+			iounmap(vf->domain.reg_base);
+			vf->domain.in_use = false;
+			memset(vf, 0, sizeof(struct cptpf_vf));
+			vf_idx++;
+		}
+	}
+
+	cpt->vfs_in_use -= vf_idx;
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return 0;
+}
+
+static int cpt_pf_create_domain(u32 id, u16 domain_id,
+				u32 num_vfs, struct kobject *kobj)
+{
+	struct cpt_device *cpt = NULL;
+	struct cpt_device *curr;
+	struct pci_dev *virtfn;
+	struct cptpf_vf *vf;
+	resource_size_t vf_start;
+	int vf_idx = 0, ret = 0;
+	int i;
+
+	if (!kobj)
+		return -EINVAL;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr->node == id && curr->pf_type == CPT_SE_83XX) {
+			cpt = curr;
+			break;
+		}
+	}
+
+	if (!cpt) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+
+	for (i = 0; i < cpt->max_vfs; i++) {
+		vf = &cpt->vf[i];
+		if (vf->domain.in_use)
+			continue;
+
+		virtfn = pci_get_domain_bus_and_slot(
+					pci_domain_nr(cpt->pdev->bus),
+					pci_iov_virtfn_bus(cpt->pdev, i),
+					pci_iov_virtfn_devfn(cpt->pdev, i));
+		if (!virtfn)
+			break;
+
+		ret = sysfs_create_link(kobj, &virtfn->dev.kobj,
+					virtfn->dev.kobj.name);
+		if (ret < 0)
+			goto err_unlock;
+
+		vf_start = pci_resource_start(cpt->pdev, PCI_CPT_PF_CFG_BAR);
+
+		vf_start += CPT_BAR_E_CPTX_VFX_BAR0_OFFSET(id, i);
+		vf->domain.reg_base = ioremap(vf_start,
+					      CPT_BAR_E_CPTX_VFX_BAR0_SIZE);
+		if (!vf->domain.reg_base) {
+			ret = -ENOMEM;
+			goto err_unlock;
+		}
+		vf->domain.domain_id = domain_id;
+		vf->domain.subdomain_id = vf_idx;
+		vf->domain.gmid = get_gmid(domain_id);
+		vf->domain.in_use = true;
+
+		cpt_config_gmctl(cpt, i, i + 1, vf->domain.gmid);
+
+		vf_idx++;
+		if (vf_idx == num_vfs) {
+			cpt->vfs_in_use += num_vfs;
+			break;
+		}
+	}
+
+	if (vf_idx != num_vfs) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return ret;
+
+err_unlock:
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	cpt_pf_remove_domain(id, domain_id, kobj);
+	return ret;
+}
+
+struct cptpf_com_s cptpf_com = {
+	.create_domain = cpt_pf_create_domain,
+	.destroy_domain = cpt_pf_remove_domain,
+};
+EXPORT_SYMBOL(cptpf_com);
+
 static int cpt_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct device *dev = &pdev->dev;
@@ -631,6 +783,18 @@ static int cpt_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 			goto cpt_err_unregister_interrupts;
 	}
 
+	/* Set CPT ID */
+	if (cpt->pf_type == CPT_SE_83XX)
+		cpt->node = atomic_add_return(1, &cpt_se_count);
+	else
+		cpt->node = atomic_add_return(1, &cpt_ae_count);
+	cpt->node -= 1;
+
+	INIT_LIST_HEAD(&cpt->list);
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_add(&cpt->list, &octeontx_cpt_devices);
+	mutex_unlock(&octeontx_cpt_devices_lock);
+
 	return 0;
 
 cpt_err_unregister_interrupts:
@@ -646,42 +810,27 @@ cpt_err_disable_device:
 static void cpt_remove(struct pci_dev *pdev)
 {
 	struct cpt_device *cpt = pci_get_drvdata(pdev);
+	struct cpt_device *curr;
 
 	if (!cpt)
 		return;
 
-	pci_disable_sriov(pdev);
-	/* Disengage SE and AE cores from all groups*/
-	cpt_disable_all_cores(cpt);
-	/* Unload microcodes */
-	cpt_unload_microcode(cpt);
-	/* Disable CPTPF interrupts */
-	cpt_unregister_interrupts(cpt);
-	pci_release_regions(pdev);
-	pci_disable_device(pdev);
-	pci_set_drvdata(pdev, NULL);
-}
-
-static void cpt_shutdown(struct pci_dev *pdev)
-{
-
-	struct cpt_device *cpt = pci_get_drvdata(pdev);
-
-	if (!cpt) {
-		dev_err(&pdev->dev, "Invalid CPT device to shutdown\n");
-		return;
+	mutex_lock(&octeontx_cpt_devices_lock);
+	list_for_each_entry(curr, &octeontx_cpt_devices, list) {
+		if (curr == cpt) {
+			list_del(&cpt->list);
+			break;
+		}
 	}
+	mutex_unlock(&octeontx_cpt_devices_lock);
 
-	dev_info(&pdev->dev, "Shutdown device %x:%x.\n",
-		 (u32)pdev->vendor, (u32)pdev->device);
-
+	pci_disable_sriov(pdev);
 	/* Disengage SE and AE cores from all groups*/
 	cpt_disable_all_cores(cpt);
 	/* Unload microcodes */
 	cpt_unload_microcode(cpt);
 	/* Disable CPTPF interrupts */
 	cpt_unregister_interrupts(cpt);
-
 	pci_release_regions(pdev);
 	pci_disable_device(pdev);
 	pci_set_drvdata(pdev, NULL);
@@ -698,7 +847,6 @@ static struct pci_driver cpt_pci_driver = {
 	.id_table = cpt_id_table,
 	.probe = cpt_probe,
 	.remove = cpt_remove,
-	.shutdown = cpt_shutdown,
 };
 
 module_pci_driver(cpt_pci_driver);
-- 
2.14.1

