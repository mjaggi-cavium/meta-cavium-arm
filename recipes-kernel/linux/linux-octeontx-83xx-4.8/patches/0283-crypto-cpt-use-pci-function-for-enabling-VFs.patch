From d747db23f8471aff75a1814f01bd9efc992bcc9f Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Date: Tue, 9 Jan 2018 11:37:51 +0100
Subject: [PATCH 283/375] crypto: cpt - use pci function for enabling VFs

Use pci driver interface function sriov_configure for enabling and
disabling CPT VFs. The sriov_configure function has a sysfs entry
sriov_numvfs that can be used to provide it with number of VFs to
enable/disable.

Signed-off-by: Lukasz Bartosik <lukasz.bartosik@cavium.com>
---
 drivers/crypto/cavium/cpt/cptpf.h      |  9 ++--
 drivers/crypto/cavium/cpt/cptpf_main.c | 87 ++++++++++++++++++----------------
 drivers/crypto/cavium/cpt/cptvf_algs.c | 35 ++++++++++++--
 drivers/crypto/cavium/cpt/cptvf_main.c | 15 ++----
 4 files changed, 89 insertions(+), 57 deletions(-)

diff --git a/drivers/crypto/cavium/cpt/cptpf.h b/drivers/crypto/cavium/cpt/cptpf.h
index 3703c502e930..3ca8bac9fea8 100644
--- a/drivers/crypto/cavium/cpt/cptpf.h
+++ b/drivers/crypto/cavium/cpt/cptpf.h
@@ -50,11 +50,11 @@ struct cptpf_vf {
 struct cpt_device {
 	struct cptpf_vf vf[CPT_MAX_VF_NUM]; /* Per VF info */
 	struct list_head list;
-	u16 flags;	/* Flags to hold device status bits */
-	u8 num_vf_en; /* Number of VFs enabled (0...CPT_MAX_VF_NUM) */
-	u8 max_vfs;	/* Maximum number of VQs supported by the CPT */
 	u8 pf_type; /* PF type 83xx_SE or 83xx_AE */
-	int vfs_in_use;
+	u8 max_vfs; /* Maximum number of VFs supported by the CPT */
+	u8 vfs_enabled; /* Number of enabled VFs */
+	u8 vfs_in_use; /* Number of VFs in use */
+	u32 flags; /* Flags to hold device status bits */
 	int node;
 
 	void __iomem *reg_base; /* Register start address */
@@ -68,4 +68,5 @@ struct cpt_device {
 };
 
 void cpt_mbox_intr_handler(struct cpt_device *cpt, int mbx);
+
 #endif /* __CPTPF_H */
diff --git a/drivers/crypto/cavium/cpt/cptpf_main.c b/drivers/crypto/cavium/cpt/cptpf_main.c
index 8a63adcef862..bc2b727e207e 100644
--- a/drivers/crypto/cavium/cpt/cptpf_main.c
+++ b/drivers/crypto/cavium/cpt/cptpf_main.c
@@ -477,8 +477,10 @@ static int cpt_device_init(struct cpt_device *cpt)
 		cpt->pf_type = CPT_SE_83XX;
 	}
 
-	/*Get max VQs/VFs supported by the device*/
+	/* Get max VQs/VFs supported by the device */
 	cpt->max_vfs = pci_sriov_get_totalvfs(cpt->pdev);
+	/* Get number of VQs/VFs to be enabled */
+	cpt->vfs_enabled = min_t(u64, num_online_cpus(), cpt->max_vfs);
 
 	/*TODO: Get CLK frequency*/
 	/*Disable all cores*/
@@ -538,38 +540,6 @@ static void cpt_unregister_interrupts(struct cpt_device *cpt)
 	pci_disable_msix(cpt->pdev);
 }
 
-static int cpt_sriov_init(struct cpt_device *cpt)
-{
-	int pos = 0;
-	int err;
-	struct pci_dev *pdev = cpt->pdev;
-
-	pos = pci_find_ext_capability(pdev, PCI_EXT_CAP_ID_SRIOV);
-	if (!pos) {
-		dev_err(&pdev->dev, "SRIOV capability is not found in PCIe config space\n");
-		return -ENODEV;
-	}
-
-	/*Enable the minimum possible VFs */
-	cpt->num_vf_en = min_t(u64, num_online_cpus(), cpt->max_vfs);
-	err = pci_enable_sriov(pdev, cpt->num_vf_en);
-	if (err) {
-		dev_err(&pdev->dev, "SRIOV enable failed, num VF is %d\n",
-			cpt->num_vf_en);
-		cpt->num_vf_en = 0;
-		return err;
-	}
-
-	/* TODO: Optionally enable static VQ priorities feature */
-
-	dev_info(&pdev->dev, "SRIOV enabled, number of VF available %d\n",
-		 cpt->num_vf_en);
-
-	cpt->flags |= CPT_FLAG_SRIOV_ENABLED;
-
-	return 0;
-}
-
 static void cpt_config_gmctl(struct cpt_device *cpt, uint8_t vq,
 			     uint8_t strm, uint16_t gmid)
 {
@@ -601,7 +571,7 @@ static int cpt_pf_remove_domain(u32 id, u16 domain_id, struct kobject *kobj)
 		return -ENODEV;
 	}
 
-	for (i = 0; i < cpt->max_vfs; i++) {
+	for (i = 0; i < cpt->vfs_enabled; i++) {
 		vf = &cpt->vf[i];
 		if (vf->domain.in_use &&
 		    vf->domain.domain_id == domain_id) {
@@ -656,7 +626,7 @@ static int cpt_pf_create_domain(u32 id, u16 domain_id,
 		goto err_unlock;
 	}
 
-	for (i = 0; i < cpt->max_vfs; i++) {
+	for (i = 0; i < cpt->vfs_enabled; i++) {
 		vf = &cpt->vf[i];
 		if (vf->domain.in_use)
 			continue;
@@ -730,7 +700,7 @@ static int cpt_reset_domain(u32 id, u16 domain_id)
 		goto err_unlock;
 	}
 
-	for (i = 0; i < cpt->max_vfs; i++) {
+	for (i = 0; i < cpt->vfs_enabled; i++) {
 		vf = &cpt->vf[i];
 		if (vf->domain.in_use &&
 		    vf->domain.domain_id == domain_id) {
@@ -756,10 +726,46 @@ err_unlock:
 struct cptpf_com_s cptpf_com = {
 	.create_domain = cpt_pf_create_domain,
 	.destroy_domain = cpt_pf_remove_domain,
-	.reset_domain = cpt_reset_domain,
+	.reset_domain = cpt_reset_domain
 };
 EXPORT_SYMBOL(cptpf_com);
 
+static int cpt_sriov_configure(struct pci_dev *pdev, int numvfs)
+{
+	struct cpt_device *cpt = pci_get_drvdata(pdev);
+	int tmp, ret = -EBUSY, disable = 0;
+
+	mutex_lock(&octeontx_cpt_devices_lock);
+	if (cpt->vfs_in_use)
+		goto exit;
+
+	ret = 0;
+	tmp = cpt->vfs_enabled;
+	if (cpt->flags & CPT_FLAG_SRIOV_ENABLED)
+		disable = 1;
+
+	if (disable) {
+		pci_disable_sriov(pdev);
+		cpt->flags &= ~CPT_FLAG_SRIOV_ENABLED;
+		cpt->vfs_enabled = 0;
+	}
+
+	if (numvfs > 0) {
+		cpt->vfs_enabled = numvfs;
+		ret = pci_enable_sriov(pdev, numvfs);
+		if (ret == 0) {
+			cpt->flags |= CPT_FLAG_SRIOV_ENABLED;
+			ret = numvfs;
+		} else
+			cpt->vfs_enabled = tmp;
+	}
+
+	dev_notice(&cpt->pdev->dev, "VFs enabled: %d\n", ret);
+exit:
+	mutex_unlock(&octeontx_cpt_devices_lock);
+	return ret;
+}
+
 static int cpt_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct device *dev = &pdev->dev;
@@ -816,15 +822,15 @@ static int cpt_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	/*
 	 * Currently we do not register any asymmetric algorithms therefore we
 	 * don't enable VFs for 83xx AE and we do not load ucode for 83xx AE
+	 * By default we enable 24 SE VFs
 	 */
 	if (cpt->pf_type != CPT_AE_83XX) {
 		err = cpt_ucode_load(cpt);
 		if (err)
 			goto cpt_err_unregister_interrupts;
 
-		/* Configure SRIOV */
-		err = cpt_sriov_init(cpt);
-		if (err)
+		err = cpt_sriov_configure(pdev, cpt->vfs_enabled);
+		if (err != cpt->vfs_enabled)
 			goto cpt_err_unregister_interrupts;
 	}
 
@@ -892,6 +898,7 @@ static struct pci_driver cpt_pci_driver = {
 	.id_table = cpt_id_table,
 	.probe = cpt_probe,
 	.remove = cpt_remove,
+	.sriov_configure = cpt_sriov_configure
 };
 
 module_pci_driver(cpt_pci_driver);
diff --git a/drivers/crypto/cavium/cpt/cptvf_algs.c b/drivers/crypto/cavium/cpt/cptvf_algs.c
index 76ec146e8d87..183deb2c1e4a 100644
--- a/drivers/crypto/cavium/cpt/cptvf_algs.c
+++ b/drivers/crypto/cavium/cpt/cptvf_algs.c
@@ -214,6 +214,10 @@ static inline int cvm_enc_dec(struct ablkcipher_request *req, u32 enc)
 	create_output_list(req, enc_iv_len);
 	store_cb_info(req, req_info);
 	cpu = get_cpu();
+	if (cpu >= se_dev_handle.count) {
+		put_cpu();
+		return -ENODEV;
+	}
 	cptvf = se_dev_handle.dev[cpu];
 	put_cpu();
 	status = cptvf_do_request(cptvf, req_info);
@@ -692,6 +696,10 @@ u32 cvm_aead_enc_dec(struct aead_request *req, u32 enc)
 	req_info->callback = (void *)cvm_callback;
 	req_info->callback_arg = (void *)&req->base;
 	cpu = get_cpu();
+	if (cpu >= se_dev_handle.count) {
+		put_cpu();
+		return -ENODEV;
+	}
 	cptvf = se_dev_handle.dev[cpu];
 	put_cpu();
 	status = cptvf_do_request(cptvf, req_info);
@@ -860,14 +868,31 @@ struct aead_alg cvm_aeads[] = { {
 	.maxauthsize = SHA1_DIGEST_SIZE,
 } };
 
+static inline int is_any_alg_used(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(algs); i++)
+		if (atomic_read(&algs[i].cra_refcnt) != 1)
+			return true;
+	for (i = 0; i < ARRAY_SIZE(cvm_aeads); i++)
+		if (atomic_read(&cvm_aeads[i].base.cra_refcnt) != 1)
+			return true;
+	return false;
+}
+
 static inline int cav_register_algs(void)
 {
-	int err = 0;
+	int i, err = 0;
 
+	for (i = 0; i < ARRAY_SIZE(algs); i++)
+		algs[i].cra_flags &= ~CRYPTO_ALG_DEAD;
 	err = crypto_register_algs(algs, ARRAY_SIZE(algs));
 	if (err)
 		return err;
 
+	for (i = 0; i < ARRAY_SIZE(cvm_aeads); i++)
+		cvm_aeads[i].base.cra_flags &= ~CRYPTO_ALG_DEAD;
 	err = crypto_register_aeads(cvm_aeads, ARRAY_SIZE(cvm_aeads));
 	if (err) {
 		crypto_unregister_algs(algs, ARRAY_SIZE(algs));
@@ -892,12 +917,14 @@ int cvm_crypto_init(struct cpt_vf *cptvf)
 		se_dev_handle.dev[se_dev_handle.count] = cptvf;
 		se_dev_handle.count++;
 
-		if (se_dev_handle.count == (num_online_cpus() - 1)) {
+		if (se_dev_handle.count == 1 &&
+		    !is_any_alg_used()) {
 			if (cav_register_algs()) {
 				dev_err(&pdev->dev,
 				   "Error in registering crypto algorithms\n");
 				return -EINVAL;
 			}
+			try_module_get(THIS_MODULE);
 		}
 	} else if (cptvf->vftype == AE_TYPES) {
 
@@ -913,6 +940,8 @@ void cvm_crypto_exit(void)
 {
 	se_dev_handle.count--;
 	if (!se_dev_handle.count &&
-	    module_refcount(THIS_MODULE) <= 0)
+	    !is_any_alg_used()) {
 		cav_unregister_algs();
+		module_put(THIS_MODULE);
+	}
 }
diff --git a/drivers/crypto/cavium/cpt/cptvf_main.c b/drivers/crypto/cavium/cpt/cptvf_main.c
index b0efc56a22f2..f83b5a55357a 100644
--- a/drivers/crypto/cavium/cpt/cptvf_main.c
+++ b/drivers/crypto/cavium/cpt/cptvf_main.c
@@ -10,6 +10,7 @@
 #include <linux/module.h>
 
 #include "cptvf.h"
+#include "cptpf.h"
 #include "request_manager.h"
 
 #define DRV_NAME	"thunder-cptvf"
@@ -780,7 +781,7 @@ static int cptvf_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct device *dev = &pdev->dev;
 	struct cpt_vf *cptvf;
-	int    err;
+	int err;
 
 	cptvf = devm_kzalloc(dev, sizeof(*cptvf), GFP_KERNEL);
 	if (!cptvf)
@@ -886,7 +887,7 @@ static int cptvf_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 			  cptvf);
 	if (err) {
 		dev_err(dev, "Request done irq failed\n");
-		goto cptvf_free_misc_irq;
+		goto cptvf_free_done_irq;
 	}
 
 	/* Enable mailbox interrupt */
@@ -919,6 +920,8 @@ static int cptvf_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 cptvf_free_irq_affinity:
 	cptvf_free_irq_affinity(cptvf, CPT_VF_INT_VEC_E_DONE);
 	cptvf_free_irq_affinity(cptvf, CPT_VF_INT_VEC_E_MISC);
+cptvf_free_done_irq:
+	free_irq(pci_irq_vector(pdev, CPT_VF_INT_VEC_E_DONE), cptvf);
 cptvf_free_misc_irq:
 	free_irq(pci_irq_vector(pdev, CPT_VF_INT_VEC_E_MISC), cptvf);
 cptvf_free_vectors:
@@ -959,13 +962,6 @@ static void cptvf_remove(struct pci_dev *pdev)
 	}
 }
 
-static void cptvf_shutdown(struct pci_dev *pdev)
-{
-	cptvf_remove(pdev);
-}
-
-
-
 /* Supported devices */
 static const struct pci_device_id cptvf_id_table[] = {
 	{PCI_VDEVICE(CAVIUM, CPT_PCI_VF_DEVICE_ID), 0},
@@ -977,7 +973,6 @@ static struct pci_driver cptvf_pci_driver = {
 	.id_table = cptvf_id_table,
 	.probe = cptvf_probe,
 	.remove = cptvf_remove,
-	.shutdown = cptvf_shutdown,
 };
 
 module_pci_driver(cptvf_pci_driver);
-- 
2.14.1

