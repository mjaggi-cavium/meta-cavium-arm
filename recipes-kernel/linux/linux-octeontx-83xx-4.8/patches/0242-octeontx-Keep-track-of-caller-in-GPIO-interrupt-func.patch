From 9177a8576eb432d8d34cefbf51964bf028e03c4a Mon Sep 17 00:00:00 2001
From: Alex Belits <alex.belits@cavium.com>
Date: Sat, 23 Sep 2017 08:19:34 -0700
Subject: [PATCH 242/375] octeontx: Keep track of caller in GPIO interrupt
 functionality.

Signed-off-by: Alex Belits <Alex.Belits@cavium.com>
---
 .../ethernet/cavium/octeontx-83xx/octeontx_main.c  | 32 +++++++++++++++++-----
 1 file changed, 25 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index 1a00ea5c2060..4babd7d2f7a6 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -111,6 +111,7 @@ struct octtx_domain {
 static int gpio_in_use;
 static int gpio_installed[MAX_GPIO];
 static struct thread_info *gpio_installed_threads[MAX_GPIO];
+static struct task_struct *gpio_installed_tasks[MAX_GPIO];
 
 static DEFINE_SPINLOCK(octeontx_domains_lock);
 static LIST_HEAD(octeontx_domains);
@@ -1095,6 +1096,10 @@ static inline int __install_el3_inthandler(unsigned long gpio_num,
 			      sp, cpu, ttbr0, 0, 0, 0, &res);
 		if (res.a0 == 0) {
 			gpio_installed[gpio_num] = 1;
+			gpio_installed_threads[gpio_num]
+				= current_thread_info();
+			gpio_installed_tasks[gpio_num]
+				= current->group_leader;
 			retval = 0;
 		}
 	}
@@ -1113,6 +1118,8 @@ static inline int __remove_el3_inthandler(unsigned long gpio_num)
 		arm_smccc_smc(THUNDERX_REMOVE_GPIO_INT, gpio_num,
 			      0, 0, 0, 0, 0, 0, &res);
 		gpio_installed[gpio_num] = 0;
+		gpio_installed_threads[gpio_num] = NULL;
+		gpio_installed_tasks[gpio_num] = NULL;
 		retval = 0;
 	} else {
 		retval = -1;
@@ -1161,10 +1168,7 @@ static long octtx_dev_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
 		gpio_num = gpio_usr.gpio_num;
 		ret = __install_el3_inthandler(gpio_num, gpio_sp,
 					       gpio_cpu, gpio_isr_base);
-		if (ret == 0)
-			gpio_installed_threads[gpio_usr.gpio_num]
-				= current_thread_info();
-		else
+		if (ret != 0)
 			return -EEXIST;
 		break;
 	case OCTTX_IOC_CLR_GPIO_HANDLER: /*Clear GPIO ISR handler*/
@@ -1181,13 +1185,27 @@ static long octtx_dev_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
 	return 0;
 }
 
-void cleanup_el3_irqs(struct thread_info *thread)
+void cleanup_el3_irqs(struct task_struct *task)
 {
 	int i;
-
 	for (i = 0; i < MAX_GPIO; i++) {
-		if (gpio_installed[i] && (gpio_installed_threads[i] == thread))
+		if (gpio_installed[i] &&
+		    gpio_installed_tasks[i] &&
+		    ((gpio_installed_tasks[i] == task) ||
+			(gpio_installed_tasks[i] == task->group_leader))) {
+			pr_alert("Exiting, removing handler for GPIO %d\n",
+				 i);
 			__remove_el3_inthandler(i);
+			pr_alert("Exited, removed handler for GPIO %d\n",
+				 i);
+		} else {
+			if (gpio_installed[i] &&
+			    (gpio_installed_threads[i]
+			     == current_thread_info()))
+				pr_alert(
+	    "Exiting, thread info matches, not removing handler for GPIO %d\n",
+					 i);
+		}
 	}
 }
 
-- 
2.14.1

