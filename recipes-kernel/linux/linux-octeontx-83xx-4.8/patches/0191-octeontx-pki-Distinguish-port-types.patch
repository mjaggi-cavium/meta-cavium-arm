From 46f1b90ba8fa7816a8c15ae8b53469829d86e409 Mon Sep 17 00:00:00 2001
From: Yuri Tolstov <yuri.tolstov@cavium.com>
Date: Thu, 13 Apr 2017 07:59:02 -0700
Subject: [PATCH 191/375] octeontx-pki: Distinguish port types.

Signed-off-by: Vinita Gupta <Vinita.Gupta@cavium.com>
Signed-off-by: Yuri Tolstov <yuri.tolstov@cavium.com>
---
 .../ethernet/cavium/octeontx-83xx/octeontx_mbox.h  | 15 ++++
 .../net/ethernet/cavium/octeontx-83xx/pki_config.c | 96 ++++++++++++++++++----
 2 files changed, 95 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
index ae29fca907ef..0a88643e6008 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
@@ -243,6 +243,14 @@ union mbox_data {
 	struct gen_resp		resp_hdr;
 };
 
+/* Interface types: */
+enum {
+	OCTTX_PORT_TYPE_NET, /* Network interface ports */
+	OCTTX_PORT_TYPE_INT, /* CPU internal interface ports */
+	OCTTX_PORT_TYPE_PCI, /* DPI/PCIe interface ports */
+	OCTTX_PORT_TYPE_MAX
+};
+
 /*----------------------------------------------------------------------------*/
 /* BGX messages:                                                              */
 /*----------------------------------------------------------------------------*/
@@ -560,6 +568,7 @@ typedef struct mbox_pki_port_type {
 
 /* pki port config */
 typedef struct mbox_pki_port_cfg {
+	u8 port_type;
 	struct {
 		/* modify mask 1=modify 0=dont modify*/
 		u8 fcs_pres:1;
@@ -585,6 +594,7 @@ typedef struct mbox_pki_port_cfg {
 
 /* pki Flow/style packet buffer config */
 typedef struct mbox_pki_port_pktbuf_cfg {
+	u8 port_type;
 	struct {
 		/* modify mask  1=modify 0=no moidfy*/
 		u16 f_mbuff_size:1;
@@ -606,6 +616,7 @@ typedef struct mbox_pki_port_pktbuf_cfg {
 
 /* pki flow/style tag config */
 typedef struct mbox_pki_port_hash_cfg {
+	u8 port_type;
 	u32 tag_slf:1;
 	u32 tag_sle:1;
 	u32 tag_sld:1;
@@ -626,6 +637,7 @@ typedef struct mbox_pki_port_hash_cfg {
 
 /* pki flow/style errcheck config */
 typedef struct mbox_pki_port_errcheck_cfg {
+	u8 port_type;
 	struct {
 		/* modify mask 1=modify 0=dont modify*/
 		u32 f_ip6_udp_opt:1;
@@ -707,6 +719,7 @@ struct mbox_pki_qos_entry {
 
 /* pki flow/style enable qos */
 typedef struct mbox_pki_port_create_qos {
+	u8 port_type;
 	u8 qpg_qos;
 	/* number of qos entries to create */
 	u8 num_entry;
@@ -719,6 +732,7 @@ typedef struct mbox_pki_port_create_qos {
 
 /* pki flow/style enable qos */
 typedef struct mbox_pki_port_modify_qos_entry {
+	u8 port_type;
 	u16 index;
 	struct {
 		/* modify mask 1=modify 0=don't modify*/
@@ -736,6 +750,7 @@ typedef struct mbox_pki_port_modify_qos_entry {
  * entries in first release.
  */
 typedef struct mbox_pki_port_enable_rss {
+	u8 port_type;
 	/* 1=enable 0=disable*/
 	u8 en_dis;
 	u8 num_queues;
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c b/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
index 8a2bb2c30cf3..13cc8d898e46 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pki_config.c
@@ -151,8 +151,16 @@ int pki_port_open(struct pkipf_vf *vf, u16 vf_id,
 	u64 cfg;
 	int i;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (port_data->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state != PKI_PORT_CLOSE && port->valid != true)
 		return MBOX_RET_INVALID; /* modify fro virtual ports later*/
 	/* Release 1.0 assign style = pkind
@@ -209,8 +217,16 @@ int pki_port_create_qos(struct pkipf_vf *vf, u16 vf_id,
 	int i;
 	int style;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (qcfg->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if ((port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP) ||
 	    port->qpg_base != QPG_NOT_INIT)
 		return MBOX_RET_INVALID;
@@ -263,8 +279,16 @@ int pki_port_start(struct pkipf_vf *vf, u16 vf_id,
 	u64 cfg;
 	int i;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (port_data->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state != PKI_PORT_STOP || port->qpg_base == QPG_NOT_INIT)
 		return MBOX_RET_INVALID;
 	for (i = 0; i < pki->max_cls; i++) {
@@ -286,8 +310,16 @@ int pki_port_stop(struct pkipf_vf *vf, u16 vf_id,
 	int i;
 	struct pki_t *pki = vf->pki;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (port_data->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state != PKI_PORT_START)
 		return MBOX_RET_INVALID;
 	for (i = 0; i < pki->max_cls; i++) {
@@ -306,8 +338,16 @@ int pki_port_close(struct pkipf_vf *vf, u16 vf_id,
 {
 	struct pki_port *port;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (port_data->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	/*TO_DO free up all the resources*/
 	/* TO_DO should we write all the register with reset
 	 * values at this point?
@@ -330,8 +370,16 @@ int pki_port_pktbuf_cfg(struct pkipf_vf *vf, u16 vf_id,
 	u8 pkt_outside_wqe, wqe_endian, cache_mode, wqe_hsz;
 	u16 mbuff_size, wqe_skip, first_skip, later_skip;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (pcfg->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state != PKI_PORT_OPEN && port->state != PKI_PORT_STOP)
 		return MBOX_RET_INVALID;
 
@@ -423,8 +471,16 @@ int pki_port_errchk(struct pkipf_vf *vf, u16 vf_id,
 	int i;
 	struct pki_t *pki = vf->pki;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (cfg->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state == PKI_PORT_CLOSE)
 		return MBOX_RET_INVALID;
 
@@ -509,8 +565,16 @@ int pki_port_hashcfg(struct pkipf_vf *vf, u16 vf_id,
 	int i;
 	struct pki_t *pki = vf->pki;
 
-	/* TO_DO add support for loopback ports later*/
-	port = &vf->bgx_port[vf_id];
+	switch (cfg->port_type) {
+	case OCTTX_PORT_TYPE_NET:
+		port = &vf->bgx_port[vf_id];
+		break;
+	case OCTTX_PORT_TYPE_INT:
+		port = &vf->lbk_port[vf_id];
+		break;
+	default:
+		return MBOX_RET_INVALID;
+	}
 	if (port->state == PKI_PORT_CLOSE)
 		return MBOX_RET_INVALID;
 
-- 
2.14.1

