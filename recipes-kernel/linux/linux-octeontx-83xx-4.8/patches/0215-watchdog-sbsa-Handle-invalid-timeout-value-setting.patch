From 36d0608fd5f77154722fad77d5334d1be25df5c9 Mon Sep 17 00:00:00 2001
From: Radha Mohan Chintakuntla <rchintakuntla@cavium.com>
Date: Fri, 4 Aug 2017 15:15:54 -0700
Subject: [PATCH 215/375] watchdog: sbsa: Handle invalid timeout value setting

The set_timeout handler should make sure the user value doesn't exceed
the hardware maximum, otherwise the timeout will happen sooner than the
refresh. The infrastructure is supposed to handle the case but its not
clear.

Signed-off-by: Radha Mohan Chintakuntla <rchintakuntla@cavium.com>
---
 drivers/watchdog/sbsa_gwdt.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/drivers/watchdog/sbsa_gwdt.c b/drivers/watchdog/sbsa_gwdt.c
index ce0c38bd0f00..2ddd0d58182d 100644
--- a/drivers/watchdog/sbsa_gwdt.c
+++ b/drivers/watchdog/sbsa_gwdt.c
@@ -50,6 +50,7 @@
  */
 
 #include <linux/io.h>
+#include <linux/kernel.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/moduleparam.h>
@@ -109,7 +110,7 @@ MODULE_PARM_DESC(timeout,
  * 1 = panic
  * defaults to skip (0)
  */
-static int action;
+static int action = 1;
 module_param(action, int, 0);
 MODULE_PARM_DESC(action, "after watchdog gets WS0 interrupt, do: "
 		 "0 = skip(*)  1 = panic");
@@ -127,11 +128,12 @@ static int sbsa_gwdt_set_timeout(struct watchdog_device *wdd,
 				 unsigned int timeout)
 {
 	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
+	u32 actual;
 
-	wdd->timeout = timeout;
+	actual = min(timeout, wdd->max_hw_heartbeat_ms / 1000);
 
 	if (action)
-		writel(gwdt->clk * timeout,
+		writel(gwdt->clk * actual,
 		       gwdt->control_base + SBSA_GWDT_WOR);
 	else
 		/*
@@ -139,7 +141,7 @@ static int sbsa_gwdt_set_timeout(struct watchdog_device *wdd,
 		 * the timeout is (WOR * 2), so the WOR should be configured
 		 * to half value of timeout.
 		 */
-		writel(gwdt->clk / 2 * timeout,
+		writel(gwdt->clk / 2 * actual,
 		       gwdt->control_base + SBSA_GWDT_WOR);
 
 	return 0;
-- 
2.14.1

