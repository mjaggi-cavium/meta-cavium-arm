From 5e9fba4435964696cc7caa0ddeb9c6e105e415b9 Mon Sep 17 00:00:00 2001
From: Vidya Velumuri <Vidya.Velumuri@cavium.com>
Date: Thu, 17 Aug 2017 11:37:01 +0200
Subject: [PATCH 219/375] octeontx-dpi: add DPI driver

The DPI driver is included in a collection of modules required by the
octeontx driver.

Signed-off-by: Vidya Velumuri <Vidya.Velumuri@cavium.com>
---
 drivers/net/ethernet/cavium/Kconfig                |  11 +
 drivers/net/ethernet/cavium/octeontx-83xx/Makefile |   2 +
 drivers/net/ethernet/cavium/octeontx-83xx/dpi.h    | 234 ++++++
 .../net/ethernet/cavium/octeontx-83xx/dpipf_main.c | 841 +++++++++++++++++++++
 .../ethernet/cavium/octeontx-83xx/octeontx_main.c  |  72 +-
 .../ethernet/cavium/octeontx-83xx/octeontx_mbox.h  |  19 +-
 6 files changed, 1172 insertions(+), 7 deletions(-)
 create mode 100644 drivers/net/ethernet/cavium/octeontx-83xx/dpi.h
 create mode 100644 drivers/net/ethernet/cavium/octeontx-83xx/dpipf_main.c

diff --git a/drivers/net/ethernet/cavium/Kconfig b/drivers/net/ethernet/cavium/Kconfig
index d9ea20adb064..5262aa4ddad4 100644
--- a/drivers/net/ethernet/cavium/Kconfig
+++ b/drivers/net/ethernet/cavium/Kconfig
@@ -144,10 +144,21 @@ config OCTEONTX_PKI
 	  Select this option to enable PKI.
           PKI parses input packets and create work.
 
+config OCTEONTX_DPI
+	tristate "OcteonTX DMA Packet Interface(DPI)"
+	depends on 64BIT
+	default y
+	help
+	  Select this option to enable DPI.
+	  DPI (DMA packet interface) provides DMA support for MAC.
+	  It transfers data between onchip IO bus and SLI.
+	  SLI interfaces PEM(PCIe) blocks.
+
 config OCTEONTX
 	tristate "OcteonTX coprocessor maintanier"
 	depends on THUNDER_NIC_BGX && OCTEONTX_FPA_PF && OCTEONTX_SSO_PF
 	depends on OCTEONTX_PKO_PF
+	depends on OCTEONTX_DPI
 	default y
 	help
 	  Select this option to enable Octeon coprocessor management.
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/Makefile b/drivers/net/ethernet/cavium/octeontx-83xx/Makefile
index 35a69d5c25da..761c3b4a53e3 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/Makefile
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_OCTEONTX_PKO_PF) += pkopf.o
 obj-$(CONFIG_OCTEONTX_LBK) += lbk.o
 obj-$(CONFIG_OCTEONTX_TIM_PF) += timpf.o
 obj-$(CONFIG_OCTEONTX_PKI) += pki.o
+obj-$(CONFIG_OCTEONTX_DPI) += dpi.o
 obj-$(CONFIG_OCTEONTX) += octeontx.o
 
 fpapf-objs := fpapf_main.o
@@ -23,3 +24,4 @@ octeontx-objs := octeontx_main.o bgx.o
 lbk-objs := lbk_main.o
 timpf-objs := timpf_main.o
 pki-objs := pki_main.o pki_ucode.o pki_config.o
+dpi-objs := dpipf_main.o
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/dpi.h b/drivers/net/ethernet/cavium/octeontx-83xx/dpi.h
new file mode 100644
index 000000000000..04c3cabca6b8
--- /dev/null
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/dpi.h
@@ -0,0 +1,234 @@
+#ifndef DPI_H
+#define	DPI_H
+
+#include <linux/pci.h>
+#include "octeontx.h"
+
+#define DPI_DMA_CMD_SIZE  32
+
+/* PCI device IDs */
+#define	PCI_DEVICE_ID_OCTEONTX_DPI_PF	 0xA057
+#define PCI_DEVICE_ID_OCTEONTX_DPI_VF	 0xA058
+
+#define DPI_MAX_ENGINES     6
+#define DPI_MAX_VFS	    8
+#define DPI_MAX_REQQ_INT    8
+#define DPI_MAX_CC_INT	    64
+
+#define DPI_DMA_DBE_INT   0x4A
+#define DPI_DMA_SBE_INT   0x49
+#define DPI_DMA_INT_REG   0x48
+#define DPI_DMA_REQQ_INT   0x40
+
+/* PCI BAR nos */
+#define	PCI_DPI_PF_CFG_BAR	  0
+#define	PCI_DPI_PF_MSIX_BAR   4
+#define	PCI_DPI_VF_CFG_BAR	  0
+#define	PCI_DPI_VF_MSIX_BAR   4
+#define DPI_VF_CFG_SIZE		  0x100000
+#define DPI_VF_OFFSET(x)	  (0x20000000 | 0x100000 * (x))
+
+/* MSI-X interrupts */
+#define	DPI_PF_MSIX_COUNT		75
+#define	DPI_VF_MSIX_COUNT		1
+
+/* TODO: Need to define proper values. */
+#define INST_AURA 1
+#define INST_STRM 1
+#define DMA_STRM 1
+
+#define DPI_INT  0x0
+#define DPI_SBE  0x0
+#define DPI_DBE  0x0
+#define DPI_REQQ  0x0
+#define DPI_DMA_CC	0x0
+
+/****************  Macros for register modification ************/
+#define DPI_DMA_IBUFF_CSIZE_CSIZE(x)	((x) & 0x1fff)
+#define DPI_DMA_IBUFF_CSIZE_GET_CSIZE(x) ((x) & 0x1fff)
+
+#define DPI_DMA_IDS_INST_AURA(x)	((uint64_t)((x) & 0xfff) << 48)
+#define DPI_DMA_IDS_GET_INST_AURA(x)	(((x) >> 48) & 0xfff)
+
+#define DPI_DMA_IDS_INST_STRM(x)	((uint64_t)((x) & 0xff) << 40)
+#define DPI_DMA_IDS_GET_INST_STRM(x)	(((x) >> 40) & 0xff)
+
+#define DPI_DMA_IDS_DMA_STRM(x)		((uint64_t)((x) & 0xff) << 32)
+#define DPI_DMA_IDS_GET_DMA_STRM(x)	(((x) >> 32) & 0xff)
+
+#define DPI_DMA_IDS_GMID(x)		((x) & 0xffff)
+#define DPI_DMA_IDS_GET_GMID(x)		((x) & 0xffff)
+
+#define DPI_ENG_BUF_BLKS(x)		((x) & 0x1fULL)
+#define DPI_ENG_BUF_GET_BLKS(x)		((x) & 0x1fULL)
+
+#define DPI_ENG_BUF_BASE(x)		(((x) & 0x3fULL) << 16)
+#define DPI_ENG_BUF_GET_BASE(x)		(((x) >> 16) & 0x3fULL)
+
+#define DPI_DMA_ENG_EN_QEN(x)		((x) & 0xffULL)
+#define DPI_DMA_ENG_EN_GET_QEN(x)	((x) & 0xffULL)
+
+#define DPI_DMA_ENG_EN_MOLR(x)		(((x) & 0x7fULL) << 32)
+#define DPI_DMA_ENG_EN_GET_MOLR(x)	(((x) >> 32) & 0x7fULL)
+
+#define DPI_DMA_CONTROL_DMA_ENB(x)	(((x) & 0x3fULL) << 48)
+#define DPI_DMA_CONTROL_GET_DMA_ENB(x)	(((x) >> 48) & 0x3fULL)
+
+#define DPI_DMA_CONTROL_O_MODE		(0x1ULL << 14)
+#define DPI_DMA_CONTROL_O_NS		(0x1ULL << 17)
+#define DPI_DMA_CONTROL_O_RO		(0x1ULL << 18)
+#define DPI_DMA_CONTROL_O_ADD1		(0x1ULL << 19)
+#define DPI_DMA_CONTROL_LDWB		(0x1ULL << 32)
+#define DPI_DMA_CONTROL_NCB_TAG_DIS	(0x1ULL << 34)
+#define DPI_DMA_CONTROL_ZBWCSEN		(0x1ULL << 39)
+#define DPI_DMA_CONTROL_WQECSDIS	(0x1ULL << 47)
+#define DPI_DMA_CONTROL_UIO_DIS		(0x1ULL << 55)
+#define DPI_DMA_CONTROL_PKT_EN		(0x1ULL << 56)
+#define DPI_DMA_CONTROL_FFP_DIS		(0x1ULL << 59)
+
+#define DPI_CTL_EN			 (0x1ULL)
+/******************** macros for Interrupts ************************/
+#define DPI_INT_REG_NFOVR				 (0x1ULL << 1)
+#define DPI_INT_REG_NDERR				 (0x1ULL)
+#define DPI_SBE_INT_RDB_SBE				 (0x1ULL)
+#define DPI_DBE_INT_RDB_DBE				 (0x1ULL)
+#define DPI_DMA_CC_INT					 (0x1ULL)
+
+#define DPI_REQQ_INT_INSTRFLT			 (0x1ULL)
+#define DPI_REQQ_INT_RDFLT				 (0x1ULL << 1)
+#define DPI_REQQ_INT_WRFLT				 (0x1ULL << 2)
+#define DPI_REQQ_INT_CSFLT				 (0x1ULL << 3)
+#define DPI_REQQ_INT_INST_DBO			 (0x1ULL << 4)
+#define DPI_REQQ_INT_INST_ADDR_NULL		 (0x1ULL << 5)
+#define DPI_REQQ_INT_INST_FILL_INVAL	 (0x1ULL << 6)
+
+#define DPI_REQQ_INT \
+	(DPI_REQQ_INT_INSTRFLT		  | \
+	DPI_REQQ_INT_RDFLT			 | \
+	DPI_REQQ_INT_WRFLT			 | \
+	DPI_REQQ_INT_CSFLT			 | \
+	DPI_REQQ_INT_INST_DBO		 | \
+	DPI_REQQ_INT_INST_ADDR_NULL  | \
+	DPI_REQQ_INT_INST_FILL_INVAL)
+
+/***************** Registers ******************/
+#define DPI_DMAX_IBUFF_CSIZE(x)		  (0x0ULL | ((x) << 11))
+#define DPI_DMAX_REQBANK0(x)		  (0x8ULL | ((x) << 11))
+#define DPI_DMAX_REQBANK1(x)		  (0x10ULL | ((x) << 11))
+#define DPI_DMAX_IDS(x)				  (0x18ULL | ((x) << 11))
+#define DPI_DMAX_IFLIGHT(x)			  (0x20ULL | ((x) << 11))
+#define DPI_DMAX_QRST(x)			  (0x28ULL | ((x) << 11))
+#define DPI_DMAX_ERR_RSP_STATUS(x)	  (0x30ULL | ((x) << 11))
+
+#define DPI_BIST_STATUS			   (0x4000ULL)
+#define DPI_ECC_CTL			   (0x4008ULL)
+#define DPI_CTL			   (0x4010ULL)
+#define DPI_DMA_CONTROL			   (0x4018ULL)
+#define DPI_DMA_ENGX_EN(x)			  (0x4040ULL | ((x) << 3))
+#define DPI_REQ_ERR_RSP			   (0x4078ULL)
+#define DPI_REQ_ERR_RESP_EN			   (0x4088ULL)
+#define DPI_PKT_ERR_RSP			   (0x4098ULL)
+#define DPI_NCBX_CFG(x)			   (0x40A0ULL | ((x) << 3))
+#define DPI_ENGX_BUF(x)			   (0x40C0ULL | ((x) << 3))
+#define DPI_SLI_PRTX_CFG(x)			   (0x4100ULL | ((x) << 3))
+#define DPI_SLI_PRTX_ERR(x)			   (0x4120ULL | ((x) << 3))
+#define DPI_SLI_PRTX_ERR_INFO(x)			(0x4140ULL | ((x) << 3))
+#define DPI_INFO_REG			(0x4160ULL)
+#define DPI_INT_REG			   (0x4168ULL)
+#define DPI_INT_REG_W1S			   (0x4170ULL)
+#define DPI_INT_ENA_W1C			   (0x4178ULL)
+#define DPI_INT_ENA_W1S			   (0x4180ULL)
+#define DPI_SBE_INT			   (0x4188ULL)
+#define DPI_SBE_INT_W1S			   (0x4190ULL)
+#define DPI_SBE_INT_ENA_W1C			   (0x4198ULL)
+#define DPI_SBE_INT_ENA_W1S			   (0x41A0ULL)
+#define DPI_DBE_INT			   (0x41A8ULL)
+#define DPI_DBE_INT_W1S			   (0x41B0ULL)
+#define DPI_DBE_INT_ENA_W1C			   (0x41B8ULL)
+#define DPI_DBE_INT_ENA_W1S		   (0x41C0ULL)
+
+#define DPI_DMA_CCX_INT(x)			  (0x5000ULL | ((x) << 3))
+#define DPI_DMA_CCX_INT_W1S(x)			  (0x5400ULL | ((x) << 3))
+#define DPI_DMA_CCX_INT_ENA_W1C(x)		  (0x5800ULL | ((x) << 3))
+#define DPI_DMA_CCX_INT_ENA_W1S(x)		  (0x5C00ULL | ((x) << 3))
+#define DPI_DMA_CCX_CNT(x)			  (0x6000ULL | ((x) << 3))
+#define DPI_REQQX_INT(x)			  (0x6600ULL | ((x) << 3))
+#define DPI_REQQX_INT_W1S(x)			  (0x6640ULL | ((x) << 3))
+#define DPI_REQQX_INT_ENA_W1C(x)		  (0x6680ULL | ((x) << 3))
+#define DPI_REQQX_INT_ENA_W1S(x)		  (0x66C0ULL | ((x) << 3))
+
+/* VF Registers: */
+#define DPI_VDMA_EN		(0X0ULL)
+#define DPI_VDMA_REQQ_CTL	  (0X8ULL)
+#define DPI_VDMA_DBELL	   (0X10ULL)
+#define DPI_VDMA_SADDR	   (0X18ULL)
+#define DPI_VDMA_COUNTS		(0X20ULL)
+#define DPI_VDMA_NADDR	   (0X28ULL)
+#define DPI_VDMA_IWBUSY		(0X30ULL)
+#define DPI_VDMA_CNT	 (0X38ULL)
+#define DPI_VF_INT	   (0X100ULL)
+#define DPI_VF_INT_W1S	   (0X108ULL)
+#define DPI_VF_INT_ENA_W1C	   (0X110ULL)
+#define DPI_VF_INT_ENA_W1S	   (0X118ULL)
+
+/***************** Structures *****************/
+struct dpipf_vf {
+	struct octeontx_pf_vf domain;
+};
+
+struct dpipf {
+	struct pci_dev *pdev;
+	void __iomem *reg_base;	/* Register start address */
+	int id;
+	struct msix_entry *msix_entries;
+	struct list_head list;
+
+	int total_vfs;
+	int vfs_in_use;
+#define DPI_SRIOV_ENABLED 1
+	unsigned int flags;
+
+	/*TODO:
+	 * Add any members specific to DPI if required.
+	 */
+	struct dpipf_vf vf[DPI_MAX_VFS];
+};
+
+struct dpipf_com_s {
+	int (*create_domain)(u32 id, u16 domain_id, u32 num_vfs,
+			     void *master, void *master_data,
+			     struct kobject *kobj, char *g_name);
+	int (*destroy_domain)(u32 id, u16 domain_id,
+			      struct kobject *kobj, char *g_name);
+	int (*reset_domain)(u32, u16);
+	int (*receive_message)(u32, u16 domain_id,
+			       struct mbox_hdr *hdr, union mbox_data *req,
+			       union mbox_data *resp, void *add_data);
+	int (*get_vf_count)(u32 id);
+};
+
+extern struct dpipf_com_s dpipf_com;
+
+struct dpivf {
+	struct pci_dev		*pdev;
+	void __iomem		*reg_base;
+	struct msix_entry	*msix_entries;
+	struct list_head	list;
+
+	bool			setup_done;
+	u16			domain_id;
+	u16			subdomain_id;
+
+	struct octeontx_master_com_t	*master;
+	void			*master_data;
+};
+
+struct dpivf_com_s {
+	struct dpivf* (*get)(u16, u16, struct octeontx_master_com_t *, void *);
+	int (*setup)(struct dpivf *);
+	void (*close)(struct dpivf *);
+};
+
+extern struct dpivf_com_s dpivf_com;
+
+#endif /* DPI_H */
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/dpipf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/dpipf_main.c
new file mode 100644
index 000000000000..ef62ab7c829a
--- /dev/null
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/dpipf_main.c
@@ -0,0 +1,841 @@
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/pci.h>
+#include <linux/delay.h>
+
+#include "dpi.h"
+
+#define DRV_NAME	"octeontx-dpi"
+#define DRV_VERSION	"0.1"
+
+static atomic_t dpi_count = ATOMIC_INIT(0);
+static DEFINE_SPINLOCK(octeontx_dpi_devices_lock);
+static LIST_HEAD(octeontx_dpi_devices);
+
+static int dpi_init(struct dpipf *dpi);
+static int dpi_queue_init(struct dpipf *dpi, u16 domain_id,
+			  u16 subdomain_id, int buf_size,
+			  u16 aura);
+
+static int dpi_queue_fini(struct dpipf *dpi,
+			  u16 domain_id,
+			  u16 vf);
+
+static int dpi_reg_dump(struct dpipf *dpi,
+			u16 domain_id,
+			u16 vf);
+
+static int dpi_queue_reset(struct dpipf *dpi,
+			   u16 vf);
+
+static int dpi_get_reg_cfg(struct dpipf *dpi,
+			   u16 domain_id, u16 vf,
+			   struct mbox_dpi_reg_cfg *reg_cfg);
+
+/* Supported devices */
+static const struct pci_device_id dpi_id_table[] = {
+	{ PCI_DEVICE(PCI_VENDOR_ID_CAVIUM, PCI_DEVICE_ID_OCTEONTX_DPI_PF) },
+	{ 0, }	/* end of table */
+};
+
+MODULE_AUTHOR("Cavium");
+MODULE_DESCRIPTION("Cavium Thunder DPI Physical Function Driver");
+MODULE_LICENSE("GPL v2");
+MODULE_VERSION(DRV_VERSION);
+MODULE_DEVICE_TABLE(pci, dpi_id_table);
+
+/* Register read/write APIs */
+static void dpi_reg_write(struct dpipf *dpi, u64 offset, u64 val)
+{
+	writeq_relaxed(val, dpi->reg_base + offset);
+}
+
+static u64 dpi_reg_read(struct dpipf *dpi, u64 offset)
+{
+	return readq_relaxed(dpi->reg_base + offset);
+}
+
+static void identify(struct dpipf_vf *vf, u16 domain_id,
+		     u16 subdomain_id)
+{
+	u64 reg = (((u64)subdomain_id << 16) | (domain_id)) << 8;
+
+	writeq_relaxed(reg, vf->domain.reg_base + DPI_VDMA_SADDR);
+}
+
+static int dpi_pf_destroy_domain(u32 id, u16 domain_id,
+				 struct kobject *kobj, char *g_name)
+{
+	struct dpipf *dpi = NULL;
+	struct dpipf *curr;
+	int i, vf_idx = 0;
+	struct pci_dev *virtfn;
+
+	spin_lock(&octeontx_dpi_devices_lock);
+	list_for_each_entry(curr, &octeontx_dpi_devices, list) {
+		if (curr->id == id) {
+			dpi = curr;
+			break;
+		}
+	}
+
+	if (!dpi) {
+		spin_unlock(&octeontx_dpi_devices_lock);
+		return -ENODEV;
+	}
+
+	for (i = 0; i < dpi->total_vfs; i++) {
+		if (dpi->vf[i].domain.in_use &&
+		    dpi->vf[i].domain.domain_id == domain_id) {
+			dpi->vf[i].domain.in_use = false;
+			identify(&dpi->vf[i], 0x0, 0x0);
+			dpi_reg_write(dpi, DPI_DMAX_IDS(i), 0x0ULL);
+
+			if (dpi->vf[i].domain.reg_base)
+				iounmap(dpi->vf[i].domain.reg_base);
+
+			virtfn = pci_get_domain_bus_and_slot(
+					pci_domain_nr(dpi->pdev->bus),
+					pci_iov_virtfn_bus(dpi->pdev, i),
+					pci_iov_virtfn_devfn(dpi->pdev, i));
+
+			if (virtfn && kobj && g_name)
+				sysfs_remove_link_from_group
+				(kobj, g_name, virtfn->dev.kobj.name);
+
+			dev_info(&dpi->pdev->dev,
+				 "Free vf[%d] from domain:%d subdomain_id:%d\n",
+				 i, dpi->vf[i].domain.domain_id, vf_idx++);
+		}
+	}
+
+	spin_unlock(&octeontx_dpi_devices_lock);
+
+	return 0;
+}
+
+static int dpi_pf_create_domain(u32 id, u16 domain_id, u32 num_vfs,
+				void *master, void *master_data,
+				struct kobject *kobj, char *g_name)
+{
+	struct dpipf *dpi = NULL;
+	struct dpipf *curr;
+	u64 i;
+	int vf_idx = 0, ret = 0;
+	resource_size_t vf_start;
+	struct pci_dev *virtfn;
+
+	if (!kobj || !g_name)
+		return -EINVAL;
+
+	spin_lock(&octeontx_dpi_devices_lock);
+	list_for_each_entry(curr, &octeontx_dpi_devices, list) {
+		if (curr->id == id) {
+			dpi = curr;
+			break;
+		}
+	}
+
+	if (!dpi) {
+		ret = -ENODEV;
+		goto err_unlock;
+	}
+
+	for (i = 0; i < dpi->total_vfs; i++) {
+		if (dpi->vf[i].domain.in_use) {
+			continue;
+		} else {
+			virtfn = pci_get_domain_bus_and_slot(
+					pci_domain_nr(dpi->pdev->bus),
+					pci_iov_virtfn_bus(dpi->pdev, i),
+					pci_iov_virtfn_devfn(dpi->pdev, i));
+			if (!virtfn)
+				break;
+			sysfs_add_link_to_group(kobj, g_name,
+						&virtfn->dev.kobj,
+				virtfn->dev.kobj.name);
+
+			dpi->vf[i].domain.domain_id = domain_id;
+			dpi->vf[i].domain.subdomain_id = vf_idx;
+			dpi->vf[i].domain.gmid = get_gmid(domain_id);
+
+			dpi->vf[i].domain.in_use = true;
+			dpi->vf[i].domain.master = master;
+			dpi->vf[i].domain.master_data = master_data;
+
+			vf_start = pci_resource_start(dpi->pdev,
+						      PCI_DPI_PF_CFG_BAR);
+			vf_start += DPI_VF_OFFSET(i);
+
+			dpi->vf[i].domain.reg_base =
+				ioremap(vf_start, DPI_VF_CFG_SIZE);
+
+			if (!dpi->vf[i].domain.reg_base)
+				break;
+
+			identify(&dpi->vf[i], domain_id, vf_idx);
+			dpi_reg_write(dpi, DPI_DMAX_IDS(i),
+				      DPI_DMA_IDS_INST_AURA(0) |
+				      DPI_DMA_IDS_INST_STRM(vf_idx + 1) |
+				      DPI_DMA_IDS_DMA_STRM(vf_idx + 1) |
+				      get_gmid(domain_id));
+
+			dev_dbg(&dpi->pdev->dev, "DOMAIN Details of DPI\n");
+
+			dev_dbg(&dpi->pdev->dev,
+				"domain creation @index: %llx for domain: %d, sub domain: %d, gmid: %d, vf_idx: %d\n",
+				i, dpi->vf[i].domain.domain_id,
+				dpi->vf[i].domain.subdomain_id,
+				dpi->vf[i].domain.gmid, vf_idx);
+
+			dev_dbg(&dpi->pdev->dev, "DPI_VDMA_SADDR: 0x%016llx\n",
+				readq_relaxed(dpi->vf[i].domain.reg_base
+				+ DPI_VDMA_SADDR));
+
+			dev_dbg(&dpi->pdev->dev, "DPI_DMA%llx_IDS: 0x%016llx\n",
+				i, dpi_reg_read(dpi, DPI_DMAX_IDS(i)));
+
+			vf_idx++;
+			if (vf_idx == num_vfs) {
+				dpi->vfs_in_use += num_vfs;
+				break;
+			}
+		}
+	}
+
+	spin_unlock(&octeontx_dpi_devices_lock);
+
+	if (vf_idx != num_vfs) {
+		ret = -ENODEV;
+		dpi_pf_destroy_domain(id, domain_id, kobj, g_name);
+	}
+	return ret;
+
+err_unlock:
+	spin_unlock(&octeontx_dpi_devices_lock);
+	return ret;
+}
+
+static struct dpipf_vf *get_vf(u32 id, u16 domain_id, u16 subdomain_id,
+			       struct dpipf **master)
+{
+	struct dpipf *dpi = NULL;
+	struct dpipf *curr;
+	int i;
+	int vf_idx = -1;
+
+	list_for_each_entry(curr, &octeontx_dpi_devices, list) {
+		if (curr->id == id) {
+			dpi = curr;
+			break;
+		}
+	}
+
+	if (!dpi)
+		return NULL;
+
+	for (i = 0; i < dpi->total_vfs; i++) {
+		if (dpi->vf[i].domain.domain_id == domain_id &&
+		    dpi->vf[i].domain.subdomain_id == subdomain_id) {
+			vf_idx = i;
+			if (master)
+				*master = dpi;
+			break;
+		}
+	}
+	if (vf_idx >= 0)
+		return &dpi->vf[vf_idx];
+	else
+		return NULL;
+}
+
+static int dpi_pf_receive_message(u32 id, u16 domain_id,
+				  struct mbox_hdr *hdr,
+				  union mbox_data *req,
+				  union mbox_data *resp,
+				  void *mdata)
+{
+	struct dpipf_vf *vf;
+	struct dpipf *dpi = NULL;
+	struct mbox_dpi_cfg *cfg;
+
+	spin_lock(&octeontx_dpi_devices_lock);
+
+	vf = get_vf(id, domain_id, hdr->vfid, &dpi);
+
+	if (!vf) {
+		hdr->res_code = MBOX_RET_INVALID;
+		spin_unlock(&octeontx_dpi_devices_lock);
+		return -ENODEV;
+	}
+
+	switch (hdr->msg) {
+	case DPI_QUEUE_OPEN:
+		cfg = mdata;
+		dpi_queue_init(dpi, domain_id, hdr->vfid, cfg->buf_size,
+			       cfg->inst_aura);
+		resp->data = 0;
+		break;
+
+	case DPI_QUEUE_CLOSE:
+		dpi_queue_fini(dpi, domain_id, hdr->vfid);
+		resp->data = 0;
+		break;
+
+	case DPI_REG_DUMP:
+		dpi_reg_dump(dpi, domain_id, hdr->vfid);
+		resp->data = 0;
+		break;
+
+	case DPI_GET_REG_CFG:
+		dpi_get_reg_cfg(dpi, domain_id, hdr->vfid, mdata);
+		resp->data = sizeof(struct mbox_dpi_reg_cfg);
+		break;
+
+	case IDENTIFY:
+		identify(vf, domain_id, hdr->vfid);
+		resp->data = 0;
+
+	default:
+		hdr->res_code = MBOX_RET_INVALID;
+		return -EINVAL;
+	}
+
+	hdr->res_code = MBOX_RET_SUCCESS;
+	spin_unlock(&octeontx_dpi_devices_lock);
+	return 0;
+}
+
+static int dpi_pf_get_vf_count(u32 id)
+{
+	struct dpipf *dpi = NULL;
+	struct dpipf *curr;
+	int ret = 0;
+
+	spin_lock(&octeontx_dpi_devices_lock);
+	list_for_each_entry(curr, &octeontx_dpi_devices, list) {
+		if (curr->id == id) {
+			dpi = curr;
+			break;
+		}
+	}
+
+	spin_unlock(&octeontx_dpi_devices_lock);
+	if (dpi)
+		ret = dpi->total_vfs;
+
+	return ret;
+}
+
+int dpi_reset_domain(u32 id, u16 domain_id)
+{
+	struct dpipf *dpi = NULL;
+	struct dpipf *curr;
+	int i;
+
+	spin_lock(&octeontx_dpi_devices_lock);
+	list_for_each_entry(curr, &octeontx_dpi_devices, list) {
+		if (curr->id == id) {
+			dpi = curr;
+			break;
+		}
+	}
+
+	if (!dpi) {
+		spin_unlock(&octeontx_dpi_devices_lock);
+		return -ENODEV;
+	}
+
+	for (i = 0; i < dpi->total_vfs; i++) {
+		if (dpi->vf[i].domain.in_use &&
+		    dpi->vf[i].domain.domain_id == domain_id) {
+			dpi_queue_reset(dpi, i);
+			identify(&dpi->vf[i], domain_id,
+				 dpi->vf[i].domain.subdomain_id);
+		}
+	}
+
+	spin_unlock(&octeontx_dpi_devices_lock);
+	return 0;
+}
+
+struct dpipf_com_s dpipf_com  = {
+	.create_domain = dpi_pf_create_domain,
+	.destroy_domain = dpi_pf_destroy_domain,
+	.reset_domain = dpi_reset_domain,
+	.receive_message = dpi_pf_receive_message,
+	.get_vf_count = dpi_pf_get_vf_count
+};
+EXPORT_SYMBOL(dpipf_com);
+
+static void dpi_irq_free(struct dpipf *dpi)
+{
+	int i = 0;
+
+	/* Clear All Enables */
+	dpi_reg_write(dpi, DPI_INT_ENA_W1C, DPI_INT_REG_NFOVR |
+		      DPI_INT_REG_NDERR);
+	dpi_reg_write(dpi, DPI_SBE_INT_ENA_W1C, DPI_SBE_INT_RDB_SBE);
+	dpi_reg_write(dpi, DPI_DBE_INT_ENA_W1C, DPI_DBE_INT_RDB_DBE);
+
+	for (i = 0; i < DPI_MAX_CC_INT; i++) {
+		dpi_reg_write(dpi, DPI_REQQX_INT(i), DPI_REQQ_INT);
+		dpi_reg_write(dpi, DPI_REQQX_INT_ENA_W1C(i), DPI_REQQ_INT);
+	}
+
+	for (i = 0; i < DPI_MAX_REQQ_INT; i++) {
+		dpi_reg_write(dpi, DPI_DMA_CCX_INT(i), DPI_DMA_CC_INT);
+		dpi_reg_write(dpi, DPI_DMA_CCX_INT_ENA_W1C(i), DPI_DMA_CC_INT);
+	}
+
+	for (i = 0; i < DPI_PF_MSIX_COUNT; i++) {
+		if (dpi->msix_entries[i].vector)
+			free_irq(dpi->msix_entries[i].vector, dpi);
+	}
+
+	pci_disable_msix(dpi->pdev);
+	devm_kfree(&dpi->pdev->dev, dpi->msix_entries);
+}
+
+static irqreturn_t dpi_pf_intr_handler (int irq, void *dpi_irq)
+{
+	u64 reg_val = 0;
+	int i = 0;
+	struct dpipf *dpi = (struct dpipf *)dpi_irq;
+
+	dev_err(&dpi->pdev->dev, "intr received: %d\n", irq);
+
+	/* extract MSIX vector number from irq number. */
+	while (irq != dpi->msix_entries[i].vector) {
+		i++;
+		if (i > DPI_PF_MSIX_COUNT)
+			break;
+	}
+	if (i < DPI_DMA_REQQ_INT) {
+		reg_val = dpi_reg_read(dpi, DPI_DMA_CCX_INT(i));
+		dev_err(&dpi->pdev->dev, "DPI_CC%d_INT raised: 0x%016llx\n",
+			i, reg_val);
+		dpi_reg_write(dpi, DPI_DMA_CCX_INT(i), 0x1ULL);
+	} else if (i < DPI_DMA_INT_REG) {
+		reg_val = dpi_reg_read(dpi, DPI_REQQX_INT(i - DPI_REQQ_INT));
+		dev_err(&dpi->pdev->dev, "DPI_REQQ_INT raised for q:%d: 0x%016llx\n",
+			(i - 0x40), reg_val);
+
+		dpi_reg_write(dpi, DPI_REQQX_INT(i - DPI_REQQ_INT), reg_val);
+
+		if (reg_val & (0x71ULL))
+			dpi_queue_reset(dpi, (i - DPI_REQQ_INT));
+	} else if (i == DPI_DMA_INT_REG) {
+		reg_val = dpi_reg_read(dpi, DPI_INT_REG);
+		dev_err(&dpi->pdev->dev, "DPI_INT_REG raised: 0x%016llx\n",
+			reg_val);
+		dpi_reg_write(dpi, DPI_INT_REG, reg_val);
+	} else if (i == DPI_DMA_SBE_INT) {
+		reg_val = dpi_reg_read(dpi, DPI_SBE_INT);
+		dev_err(&dpi->pdev->dev, "DPI_SBE_INT raised: 0x%016llx\n",
+			reg_val);
+		dpi_reg_write(dpi, DPI_SBE_INT, reg_val);
+	} else	if (i == DPI_DMA_DBE_INT) {
+		reg_val = dpi_reg_read(dpi, DPI_DBE_INT);
+		dev_err(&dpi->pdev->dev, "DPI_DBE_INT raised: 0x%016llx\n",
+			reg_val);
+		dpi_reg_write(dpi, DPI_DBE_INT, reg_val);
+	}	return IRQ_HANDLED;
+}
+
+static int dpi_irq_init(struct dpipf *dpi)
+{
+	int i;
+	int ret = 0;
+
+	/* Clear All Interrupts */
+	dpi_reg_write(dpi, DPI_INT_REG, DPI_INT_REG_NFOVR | DPI_INT_REG_NDERR);
+	dpi_reg_write(dpi, DPI_SBE_INT, DPI_SBE_INT_RDB_SBE);
+	dpi_reg_write(dpi, DPI_DBE_INT, DPI_DBE_INT_RDB_DBE);
+
+	/* Clear All Enables */
+	dpi_reg_write(dpi, DPI_INT_ENA_W1C, DPI_INT_REG_NFOVR |
+		      DPI_INT_REG_NDERR);
+	dpi_reg_write(dpi, DPI_SBE_INT_ENA_W1C, DPI_SBE_INT_RDB_SBE);
+	dpi_reg_write(dpi, DPI_DBE_INT_ENA_W1C, DPI_DBE_INT_RDB_DBE);
+
+	for (i = 0; i < 8; i++) {
+		dpi_reg_write(dpi, DPI_REQQX_INT(i), DPI_REQQ_INT);
+		dpi_reg_write(dpi, DPI_REQQX_INT_ENA_W1C(i), DPI_REQQ_INT);
+	}
+
+	for (i = 0; i < 64; i++) {
+		dpi_reg_write(dpi, DPI_DMA_CCX_INT(i), DPI_DMA_CC_INT);
+		dpi_reg_write(dpi, DPI_DMA_CCX_INT_ENA_W1C(i), DPI_DMA_CC_INT);
+	}
+
+	dpi->msix_entries =
+	devm_kzalloc(&dpi->pdev->dev,
+		     DPI_PF_MSIX_COUNT * sizeof(struct msix_entry), GFP_KERNEL);
+
+	if (!dpi->msix_entries)
+		return -ENOMEM;
+
+	for (i = 0; i < DPI_PF_MSIX_COUNT; i++)
+		dpi->msix_entries[i].entry = i;
+
+	ret = pci_enable_msix(dpi->pdev, dpi->msix_entries, DPI_PF_MSIX_COUNT);
+	if (ret) {
+		dev_err(&dpi->pdev->dev, "Enabling msix failed\n");
+		goto free_entries;
+	}
+
+	for (i = 0; i < DPI_PF_MSIX_COUNT; i++) {
+		ret = request_irq(dpi->msix_entries[i].vector,
+				  dpi_pf_intr_handler, 0, "dpipf", dpi);
+		if (ret)
+			goto free_irq;
+	}
+
+	/*Enable All Interrupts */
+	dpi_reg_write(dpi, DPI_INT_ENA_W1S, DPI_INT_REG_NFOVR |
+		      DPI_INT_REG_NDERR);
+	dpi_reg_write(dpi, DPI_SBE_INT_ENA_W1S, DPI_SBE_INT_RDB_SBE);
+	dpi_reg_write(dpi, DPI_DBE_INT_ENA_W1S, DPI_DBE_INT_RDB_DBE);
+
+	for (i = 0; i < 8; i++)
+		dpi_reg_write(dpi, DPI_REQQX_INT_ENA_W1S(i), DPI_REQQ_INT);
+
+	return 0;
+free_irq:
+	for (; i >= 0; i--)
+		free_irq(dpi->msix_entries[i].vector, dpi);
+	pci_disable_msix(dpi->pdev);
+
+free_entries:
+	devm_kfree(&dpi->pdev->dev, dpi->msix_entries);
+	return ret;
+}
+
+/* cavium-pf code starts here */
+static int dpi_sriov_configure(struct pci_dev *pdev, int numvfs)
+{
+	struct dpipf *dpi = pci_get_drvdata(pdev);
+	int ret = -EBUSY;
+	int disable = 0;
+
+	if (dpi->vfs_in_use != 0)
+		return ret;
+
+	ret = 0;
+	if (dpi->flags & DPI_SRIOV_ENABLED)
+		disable = 1;
+
+	if (disable) {
+		pci_disable_sriov(pdev);
+		dpi->flags &= ~DPI_SRIOV_ENABLED;
+		dpi->total_vfs = 0;
+	}
+
+	if (numvfs > 0) {
+		ret = pci_enable_sriov(pdev, numvfs);
+		if (ret == 0) {
+			dpi->flags |= DPI_SRIOV_ENABLED;
+			dpi->total_vfs = numvfs;
+			ret = numvfs;
+		}
+	}
+	return ret;
+}
+
+int dpi_dma_engine_get_num(void)
+{
+	return DPI_MAX_ENGINES;
+}
+
+/**
+ * Perform global init of DPI
+ *
+ * @return Zero on success, negative on failure
+ */
+int dpi_init(struct dpipf *dpi)
+{
+	int engine = 0;
+	u64 reg = 0;
+
+	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+		if (engine == 4 || engine == 5)
+			reg = DPI_ENG_BUF_BLKS(8);
+		else
+			reg = DPI_ENG_BUF_BLKS(4);
+
+		dpi_reg_write(dpi, DPI_ENGX_BUF(engine), reg);
+
+		/* Here qmap for the engines are set to 0.
+		 * No dpi queues are mapped to engines.
+		 * When a VF is initialised corresponding bit
+		 * in the qmap will be set for all engines.
+		 */
+		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), 0x0ULL);
+	}
+
+	reg = 0;
+	reg =  (DPI_DMA_CONTROL_ZBWCSEN | DPI_DMA_CONTROL_PKT_EN |
+		DPI_DMA_CONTROL_LDWB | DPI_DMA_CONTROL_O_MODE |
+		DPI_DMA_CONTROL_DMA_ENB(0xfULL));
+
+	dpi_reg_write(dpi, DPI_DMA_CONTROL, reg);
+
+	dpi_reg_write(dpi, DPI_CTL, DPI_CTL_EN);
+
+	return 0;
+}
+
+int dpi_queue_init(struct dpipf *dpi, u16 domain_id,
+		   u16 vf, int buf_size, u16 aura)
+{
+	int engine = 0;
+	int queue = vf;
+	u64 reg = 0ULL;
+
+	dpi_reg_write(dpi, DPI_DMAX_IBUFF_CSIZE(queue),
+		      DPI_DMA_IBUFF_CSIZE_CSIZE((u64)(buf_size / 8)));
+
+	/* IDs are already configured while crating the domains.
+	 * No need to configure here.
+	 */
+	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+		/* Dont configure the queus for PKT engines */
+		if (engine >= 4)
+			break;
+
+		reg = 0;
+		reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
+		reg |= DPI_DMA_ENG_EN_QEN(0x1 << queue);
+		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+	}
+
+	reg = dpi_reg_read(dpi, DPI_DMAX_IDS(queue));
+	reg |= DPI_DMA_IDS_INST_AURA(aura);
+	dpi_reg_write(dpi, DPI_DMAX_IDS(queue), reg);
+
+	return 0;
+}
+
+int dpi_queue_fini(struct dpipf *dpi, u16 domain_id,
+		   u16 vf)
+{
+	int engine = 0;
+	int queue = vf;
+	u64 reg = 0ULL;
+
+	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+		/* Dont configure the queus for PKT engines */
+		if (engine >= 4)
+			break;
+
+		reg = 0;
+		reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
+		reg &= DPI_DMA_ENG_EN_QEN((~(1 << queue)));
+		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+	}
+
+	dpi_reg_write(dpi, DPI_DMAX_QRST(queue), 0x1ULL);
+
+	return 0;
+}
+
+int dpi_queue_reset(struct dpipf *dpi, u16 vf)
+{
+	int engine = 0;
+	u64 reg = 0ULL;
+	struct dpipf_vf *dpivf = &dpi->vf[vf];
+	u64 val = 0;
+
+	/* wait for SADDR to become idle. */
+	do {
+		val = readq_relaxed(dpivf->domain.reg_base + DPI_VDMA_SADDR);
+	} while (!(val & (0x1ULL << 63)));
+
+	/* Disable the QEN bit in all engines for that queue/vf. */
+	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+		/* Dont configure the queus for PKT engines.*/
+		if (engine >= 4)
+			break;
+
+		reg = 0;
+		reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
+		reg &= DPI_DMA_ENG_EN_QEN((~(1 << vf)));
+		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+	}
+
+	/* Reset the queue. */
+	dpi_reg_write(dpi, DPI_DMAX_QRST(vf), 0x1ULL);
+
+	/* Enable the QEN bit in all engines for that queue/vf. */
+	for (engine = 0; engine < dpi_dma_engine_get_num(); engine++) {
+		/* Dont configure the queus for PKT engines */
+		if (engine >= 4)
+			break;
+
+		reg = 0;
+		reg = dpi_reg_read(dpi, DPI_DMA_ENGX_EN(engine));
+		reg |= DPI_DMA_ENG_EN_QEN((1 << vf));
+		dpi_reg_write(dpi, DPI_DMA_ENGX_EN(engine), reg);
+	}
+
+	/* Reneable the Queue. */
+	val = 0x1ULL;
+	writeq_relaxed(val, dpivf->domain.reg_base + DPI_VDMA_EN);
+
+	return 0;
+}
+
+int dpi_get_reg_cfg(struct dpipf *dpi, u16 domain_id, u16 vf,
+		    struct mbox_dpi_reg_cfg *reg_cfg)
+{
+	reg_cfg->dpi_dma_ctl = dpi_reg_read(dpi, DPI_DMA_CONTROL);
+	reg_cfg->dpi_sli_prt_cfg = dpi_reg_read(dpi, DPI_REQ_ERR_RESP_EN);
+	reg_cfg->dpi_req_err_rsp_en = dpi_reg_read(dpi, DPI_SLI_PRTX_CFG(0));
+
+	return 0;
+}
+
+int dpi_reg_dump(struct dpipf *dpi, u16 domain_id,
+		 u16 vf)
+{
+	int i = vf;
+
+	/* TODO: add the dump for required registers*/
+	dev_info(&dpi->pdev->dev, "REG DUMP for VF: %d\n", vf);
+	dev_info(&dpi->pdev->dev, "Global Registers\n");
+
+	dev_info(&dpi->pdev->dev, "DPI_DMA_IBUFF_CSIZE: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMAX_IBUFF_CSIZE(i)));
+
+	dev_info(&dpi->pdev->dev, "DPI_DMA_REQBANK0: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMAX_REQBANK0(i)));
+	dev_info(&dpi->pdev->dev, "DPI_DMA_REQBANK1: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMAX_REQBANK1(i)));
+	dev_info(&dpi->pdev->dev, "DPI_DMA_IDS: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMAX_IDS(i)));
+	dev_info(&dpi->pdev->dev, "DPI_DMA_QRST: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMAX_QRST(i)));
+	for (i = 0; i < 7; i++)
+		dev_info(&dpi->pdev->dev, "DPI_DMA%d_ERR_RSP_STATUS: 0x%016llx\n",
+			 i, dpi_reg_read(dpi, DPI_DMAX_ERR_RSP_STATUS(i)));
+
+	dev_info(&dpi->pdev->dev, "DPI_CTL: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_CTL));
+	dev_info(&dpi->pdev->dev, "DPI_DMA_CONTROL: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_DMA_CONTROL));
+	for (i = 0; i < 6; i++)
+		dev_info(&dpi->pdev->dev, "DPI_DMA_ENG%d_EN: 0x%016llx\n", i,
+			 dpi_reg_read(dpi, DPI_DMA_ENGX_EN(i)));
+
+	dev_info(&dpi->pdev->dev, "DPI_REQ_ERR_RSP: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_REQ_ERR_RSP));
+
+	dev_info(&dpi->pdev->dev, "DPI_REQ_ERR_RSP_EN: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_REQ_ERR_RESP_EN));
+
+	dev_info(&dpi->pdev->dev, "DPI_PKT_ERR_RSP: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_PKT_ERR_RSP));
+
+	dev_info(&dpi->pdev->dev, "DPI_SLI_PRT_CFG: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_SLI_PRTX_CFG(0)));
+	dev_info(&dpi->pdev->dev, "DPI_SLI_PRT_ERROR: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_SLI_PRTX_ERR(0)));
+	dev_info(&dpi->pdev->dev, "DPI_SLI_PRT_ERR_INFO: 0x%016llx\n",
+		 dpi_reg_read(dpi, DPI_SLI_PRTX_ERR_INFO(0)));
+
+	return 0;
+}
+
+int dpi_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
+{
+	struct device *dev = &pdev->dev;
+	struct dpipf *dpi;
+	int err;
+
+	dpi = devm_kzalloc(dev, sizeof(*dpi), GFP_KERNEL);
+	if (!dpi)
+		return -ENOMEM;
+
+	pci_set_drvdata(pdev, dpi);
+	dpi->pdev = pdev;
+
+	err = pcim_enable_device(pdev);
+	if (err) {
+		dev_err(dev, "Failed to enable PCI device\n");
+		pci_set_drvdata(pdev, NULL);
+		return err;
+	}
+	err = pci_request_regions(pdev, DRV_NAME);
+	if (err) {
+		dev_err(dev, "PCI request regions failed 0x%x\n", err);
+		return err;
+	}
+
+	/* MAP PF's configuration registers */
+	dpi->reg_base = pcim_iomap(pdev, PCI_DPI_PF_CFG_BAR, 0);
+	if (!dpi->reg_base) {
+		dev_err(dev, "Cannot map config register space, aborting\n");
+		err = -ENOMEM;
+		return err;
+	}
+
+	/*set DPI ID */
+	dpi->id = atomic_add_return(1, &dpi_count);
+	dpi->id -= 1;
+
+	err = dpi_init(dpi);
+	if (err) {
+		dev_err(dev, "Failed to init DPI\n");
+		atomic_sub_return(1, &dpi_count);
+		return err;
+	}
+
+	/* Register interrupts */
+	err = dpi_irq_init(dpi);
+	if (err) {
+		atomic_sub_return(1, &dpi_count);
+		dev_err(dev, "failed init irqs\n");
+		err = -EINVAL;
+		return err;
+	}
+
+	INIT_LIST_HEAD(&dpi->list);
+	spin_lock(&octeontx_dpi_devices_lock);
+	list_add(&dpi->list, &octeontx_dpi_devices);
+	spin_unlock(&octeontx_dpi_devices_lock);
+
+	return 0;
+}
+
+static void dpi_remove(struct pci_dev *pdev)
+{
+	struct dpipf *dpi = pci_get_drvdata(pdev);
+
+	dpi_irq_free(dpi);
+	dpi_sriov_configure(pdev, 0);
+}
+
+static struct pci_driver dpi_driver = {
+	.name = DRV_NAME,
+	.id_table = dpi_id_table,
+	.probe = dpi_probe,
+	.remove = dpi_remove,
+	.sriov_configure = dpi_sriov_configure,
+};
+
+static int __init dpi_init_module(void)
+{
+	pr_info("%s, ver %s\n", DRV_NAME, DRV_VERSION);
+
+	return pci_register_driver(&dpi_driver);
+}
+
+static void __exit dpi_cleanup_module(void)
+{
+	pci_unregister_driver(&dpi_driver);
+}
+
+module_init(dpi_init_module);
+module_exit(dpi_cleanup_module);
+
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index 6f1ba62e3361..aefdbd8142e8 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -27,6 +27,7 @@
 #include "lbk.h"
 #include "tim.h"
 #include "pki.h"
+#include "dpi.h"
 
 #define DRV_NAME "octeontx"
 #define DRV_VERSION "0.1"
@@ -49,6 +50,7 @@ static struct pkopf_com_s *pkopf;
 static struct timpf_com_s *timpf;
 static struct ssowpf_com_s *ssowpf;
 static struct pki_com_s *pki;
+static struct dpipf_com_s *dpipf;
 
 struct delayed_work dwork;
 struct delayed_work dwork_reset;
@@ -70,6 +72,7 @@ struct octtx_domain {
 	int sso_vf_count;
 	int ssow_vf_count;
 	int tim_vf_count;
+	int dpi_vf_count;
 
 	u64 aura_set;
 	u64 grp_mask;
@@ -92,6 +95,7 @@ struct octtx_domain {
 	bool bgx_domain_created;
 	bool pko_domain_created;
 	bool tim_domain_created;
+	bool dpi_domain_created;
 };
 
 struct octtx_gpio gpio;
@@ -108,7 +112,8 @@ MODULE_VERSION(DRV_VERSION);
 static int octeontx_create_domain(const char *name, int type, int sso_count,
 				  int fpa_count, int ssow_count, int pko_count,
 				  int pki_count, int tim_count, int bgx_count,
-				  int lbk_count, const long int *bgx_port,
+				  int lbk_count, int dpi_count,
+				  const long int *bgx_port,
 				  const long int *lbk_port);
 
 static void octeontx_remove_domain(const char *domain_name);
@@ -153,6 +158,7 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	long int tim_count = 0;
 	long int bgx_count = 0;
 	long int lbk_count = 0;
+	long int dpi_count = 0;
 	long int pki_count = 0;
 	long int lbk_port[OCTTX_MAX_LBK_PORTS];
 	long int bgx_port[OCTTX_MAX_BGX_PORTS];
@@ -231,6 +237,12 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 			if (kstrtol(strim(start), 10, &lbk_port[lbk_count]))
 				goto error;
 			lbk_count++;
+		} else if (!strncmp(start, "dpi", sizeof("dpi") - 1)) {
+			temp = strsep(&start, ":");
+			if (!start)
+				goto error;
+			if (kstrtol(start, 10, &dpi_count))
+				goto error;
 		} else {
 			goto error;
 		}
@@ -239,7 +251,7 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	ret = octeontx_create_domain(name, type, sso_count, fpa_count,
 				     ssow_count, pko_count, pki_count,
 				     tim_count, bgx_count, lbk_count,
-				     (const long int *)bgx_port,
+				     dpi_count, (const long int *)bgx_port,
 				     (const long int *)lbk_port);
 	if (ret)
 		goto error;
@@ -337,6 +349,10 @@ static int octtx_master_receive_message(struct mbox_hdr *hdr,
 			hdr->res_code = MBOX_RET_SUCCESS;
 			break;
 		}
+	case DPI_COPROC:
+		dpipf->receive_message(0, domain->domain_id, hdr,
+				       req, resp, add_data);
+		break;
 	case SSOW_COPROC:
 	default:
 		dev_err(octtx_device, "invalid mbox message\n");
@@ -468,6 +484,17 @@ static void do_remove_domain(struct octtx_domain *domain)
 		}
 	}
 
+	if (domain->dpi_domain_created) {
+		ret = dpipf->destroy_domain(node, domain_id,
+					    &octtx_device->kobj,
+					    domain->name);
+		if (ret) {
+			dev_err(octtx_device,
+				"Failed to remove dpi of domain %d on node %d.\n",
+				domain->domain_id, node);
+		}
+	}
+
 	if (domain->sysfs_domain_id_created)
 		sysfs_remove_file_from_group(&octtx_device->kobj,
 					     &domain->sysfs_domain_id.attr,
@@ -491,7 +518,8 @@ static ssize_t octtx_domain_id_show(struct device *dev,
 int octeontx_create_domain(const char *name, int type, int sso_count,
 			   int fpa_count, int ssow_count, int pko_count,
 			   int pki_count, int tim_count, int bgx_count,
-			   int lbk_count, const long int *bgx_port,
+			   int lbk_count, int dpi_count,
+			   const long int *bgx_port,
 			   const long int *lbk_port)
 {
 	void *ssow_ram_mbox_addr = NULL;
@@ -692,9 +720,9 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 		ret = pki->add_bgx_port(node, domain_id, &domain->bgx_port[i]);
 		if (ret < 0) {
 			dev_err(octtx_device,
-			    "BGX failed to allocate PKIND for port l%d(g%d)\n",
-			    domain->bgx_port[i].dom_port_idx,
-			    domain->bgx_port[i].glb_port_idx);
+				"BGX failed to allocate PKIND for port l%d(g%d)\n",
+				domain->bgx_port[i].dom_port_idx,
+				domain->bgx_port[i].glb_port_idx);
 			goto error;
 		}
 		domain->bgx_port[i].pkind = ret;
@@ -738,6 +766,19 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 	}
 	domain->tim_domain_created = true;
 
+	domain->dpi_vf_count = dpi_count;
+	if (domain->dpi_vf_count > 0) {
+		ret = dpipf->create_domain(node, domain_id,
+					   domain->dpi_vf_count,
+					   &octtx_master_com, domain,
+					   &octtx_device->kobj, domain->name);
+		if (ret) {
+			dev_err(octtx_device, "Failed to create DPI domain\n");
+			goto error;
+		}
+	}
+	domain->dpi_domain_created = true;
+
 	domain->sysfs_domain_id.show = octtx_domain_id_show;
 	domain->sysfs_domain_id.attr.name = "domain_id";
 	domain->sysfs_domain_id.attr.mode = 0444;
@@ -845,6 +886,15 @@ static int octeontx_reset_domain(void *master_data)
 		}
 	}
 
+	if (domain->dpi_domain_created) {
+		ret = dpipf->reset_domain(node, domain->domain_id);
+		if (ret) {
+			dev_err(octtx_device,
+				"Failed to reset DPI of domain %d on node %d.\n",
+				domain->domain_id, node);
+		}
+	}
+
 	/* Reset mailbox */
 	ret = ssowpf->get_ram_mbox_addr(node, domain->domain_id,
 					&ssow_ram_mbox_addr);
@@ -1084,6 +1134,13 @@ static int __init octeontx_init_module(void)
 		ret = -ENODEV;
 		goto pkopf_err;
 	}
+
+	dpipf = try_then_request_module(symbol_get(dpipf_com), "dpipf");
+	if (!dpipf) {
+		ret = -ENODEV;
+		goto dpipf_err;
+	}
+
 	timpf = try_then_request_module(symbol_get(timpf_com), "timpf");
 	if (!timpf) {
 		ret = -ENODEV;
@@ -1173,6 +1230,9 @@ wq_err:
 	symbol_put(timpf_com);
 
 timpf_err:
+	symbol_put(dpipf_com);
+
+dpipf_err:
 	symbol_put(pkopf_com);
 
 pkopf_err:
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
index 1d7f7ce2debf..a2f4bdfd925f 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_mbox.h
@@ -18,7 +18,8 @@ enum coproc_t {
 	PKI_COPROC = 5,
 	BGX_COPROC = 6,
 	LBK_COPROC = 7,
-	TIM_COPROC = 8
+	TIM_COPROC = 8,
+	DPI_COPROC = 9
 };
 
 /*req messages*/
@@ -43,6 +44,11 @@ enum coproc_t {
 #define SSO_GRP_SET_PRIORITY	0x8
 #define SSO_GET_DUMP		0x9
 
+#define DPI_QUEUE_OPEN	0x1
+#define DPI_QUEUE_CLOSE	0x2
+#define DPI_REG_DUMP	0x3
+#define DPI_GET_REG_CFG 0x4
+
 /*resp messages*/
 #define MBOX_RET_SUCCESS	0x0
 #define MBOX_RET_INVALID	0x1
@@ -231,6 +237,17 @@ struct mbox_fpa_lvls {
 	u16	gaura;
 };
 
+struct mbox_dpi_cfg {
+	u16	inst_aura;
+	int	buf_size;
+};
+
+struct mbox_dpi_reg_cfg {
+	u64	dpi_dma_ctl;
+	u64	dpi_sli_prt_cfg;
+	u64	dpi_req_err_rsp_en;
+};
+
 /* SSOW */
 struct mbox_ssow_identify {
 	u16	domain_id;
-- 
2.14.1

