From 502ae58f5f2d125b8216933d7a0a9e809cdadd2f Mon Sep 17 00:00:00 2001
From: Lukasz Bartosik <lukasz.bartosik@cavium.com>
Date: Tue, 9 Jan 2018 11:37:47 +0100
Subject: [PATCH 266/375] octeontx: add CPT domain handling in OCTEONTX

Add CPT domain handling code to OCTEONTX module. This patch enables
creation and destruction of CPT's domains in OcteonTx RM. This code
is based on patch linux-octeontx-cpt-crypto.patch from
se2-rel-ga6.2p1-cpt-crypto release.

Signed-off-by: Lukasz Bartosik <lukasz.bartosik@cavium.com>
---
 .../ethernet/cavium/octeontx-83xx/octeontx_main.c  | 47 ++++++++++++++++++++--
 1 file changed, 44 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index 4be47f7a20b1..c76cce976006 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -30,6 +30,7 @@
 #include "pki.h"
 #include "dpi.h"
 #include "zip.h"
+#include "cpt.h"
 
 #define DRV_NAME "octeontx"
 #define DRV_VERSION "1.0"
@@ -56,6 +57,7 @@ static struct fpapf_com_s *fpapf;
 static struct ssopf_com_s *ssopf;
 static struct pkopf_com_s *pkopf;
 static struct timpf_com_s *timpf;
+static struct cptpf_com_s *cptpf;
 static struct ssowpf_com_s *ssowpf;
 static struct pki_com_s *pki;
 static struct dpipf_com_s *dpipf;
@@ -85,6 +87,7 @@ struct octtx_domain {
 	int tim_vf_count;
 	int dpi_vf_count;
 	int zip_vf_count;
+	int cpt_vf_count;
 
 	u64 aura_set;
 	u64 grp_mask;
@@ -111,6 +114,7 @@ struct octtx_domain {
 	bool tim_domain_created;
 	bool dpi_domain_created;
 	bool zip_domain_created;
+	bool cpt_domain_created;
 };
 
 static int gpio_in_use;
@@ -130,7 +134,7 @@ static int octeontx_create_domain(const char *name, int type, int sso_count,
 				  int fpa_count, int ssow_count, int pko_count,
 				  int pki_count, int tim_count, int bgx_count,
 				  int lbk_count, int dpi_count, int zip_count,
-				  const long int *bgx_port,
+				  int cpt_count, const long int *bgx_port,
 				  const long int *lbk_port);
 
 static void octeontx_destroy_domain(const char *domain_name);
@@ -176,6 +180,7 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	long int dpi_count = 0;
 	long int zip_count = 0;
 	long int pki_count = 0;
+	long int cpt_count = 0;
 	long int lbk_port[OCTTX_MAX_LBK_PORTS];
 	long int bgx_port[OCTTX_MAX_BGX_PORTS];
 	char *errmsg = "Wrong domain specification format.";
@@ -240,6 +245,12 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 				goto error;
 			if (kstrtol(strim(start), 10, &tim_count))
 				goto error;
+		}  else if (!strncmp(strim(start), "cpt", sizeof("cpt") - 1)) {
+			temp = strsep(&start, ":");
+			if (!start)
+				goto error;
+			if (kstrtol(start, 10, &cpt_count))
+				goto error;
 		} else if (!strncmp(strim(start), "net", sizeof("net") - 1)) {
 			temp = strsep(&start, ":");
 			if (!start)
@@ -274,7 +285,7 @@ static ssize_t octtx_create_domain_store(struct device *dev,
 	ret = octeontx_create_domain(name, type, sso_count, fpa_count,
 				     ssow_count, pko_count, pki_count,
 				     tim_count, bgx_count, lbk_count,
-				     dpi_count, zip_count,
+				     dpi_count, zip_count, cpt_count,
 				     (const long int *)bgx_port,
 				     (const long int *)lbk_port);
 	if (ret) {
@@ -555,6 +566,15 @@ static void do_destroy_domain(struct octtx_domain *domain)
 		}
 	}
 
+	if (domain->cpt_domain_created) {
+		ret = cptpf->destroy_domain(node, domain_id, domain->kobj);
+		if (ret) {
+			dev_err(octtx_device,
+				"Failed to remove CPT of domain %d on node %d.\n",
+				domain->domain_id, node);
+		}
+	}
+
 	if (domain->fpa_domain_created) {
 		ret = fpapf->destroy_domain(node, domain_id, domain->kobj);
 		if (ret) {
@@ -655,7 +675,7 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 			   int fpa_count, int ssow_count, int pko_count,
 			   int pki_count, int tim_count, int bgx_count,
 			   int lbk_count, int dpi_count, int zip_count,
-			   const long int *bgx_port,
+			   int cpt_count, const long int *bgx_port,
 			   const long int *lbk_port)
 {
 	void *ssow_ram_mbox_addr = NULL;
@@ -919,6 +939,17 @@ int octeontx_create_domain(const char *name, int type, int sso_count,
 	}
 	domain->tim_domain_created = true;
 
+	domain->cpt_vf_count = cpt_count;
+	if (domain->cpt_vf_count > 0) {
+		ret = cptpf->create_domain(node, domain_id,
+					   domain->cpt_vf_count, domain->kobj);
+		if (ret) {
+			dev_err(octtx_device, "Failed to create CPT domain\n");
+			goto error;
+		}
+		domain->cpt_domain_created = true;
+	}
+
 	domain->dpi_vf_count = dpi_count;
 	if (domain->dpi_vf_count > 0) {
 		ret = dpipf->create_domain(node, domain_id,
@@ -1388,6 +1419,12 @@ static int __init octeontx_init_module(void)
 		goto timpf_err;
 	}
 
+	cptpf = try_then_request_module(symbol_get(cptpf_com), "cptpf");
+	if (!cptpf) {
+		ret = -ENODEV;
+		goto cptpf_err;
+	}
+
 	/* Register a physical link status poll fn() */
 	check_link = alloc_workqueue("octeontx_check_link_status",
 				     WQ_UNBOUND | WQ_MEM_RECLAIM, 1);
@@ -1467,6 +1504,9 @@ cdev_alloc_err:
 
 alloc_chrdev_err:
 wq_err:
+	symbol_put(cptpf_com);
+
+cptpf_err:
 	symbol_put(timpf_com);
 
 timpf_err:
@@ -1519,6 +1559,7 @@ static void __exit octeontx_cleanup_module(void)
 	symbol_put(pkopf_com);
 	symbol_put(timpf_com);
 	symbol_put(zippf_com);
+	symbol_put(cptpf_com);
 	symbol_put(lbk_com);
 	symbol_put(thunder_bgx_com);
 }
-- 
2.14.1

