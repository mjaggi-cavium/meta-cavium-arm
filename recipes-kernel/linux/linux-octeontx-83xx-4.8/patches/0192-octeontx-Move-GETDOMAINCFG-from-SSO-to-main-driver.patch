From dc3c9bf8a70e4b782df243580ef869303e876bbc Mon Sep 17 00:00:00 2001
From: Yuri Tolstov <yuri.tolstov@cavium.com>
Date: Thu, 13 Apr 2017 08:19:45 -0700
Subject: [PATCH 192/375] octeontx: Move GETDOMAINCFG from SSO to main driver.

Signed-off-by: Yuri Tolstov <yuri.tolstov@cavium.com>
---
 .../ethernet/cavium/octeontx-83xx/octeontx_main.c  |  37 +++++---
 drivers/net/ethernet/cavium/octeontx-83xx/pko.h    |   8 +-
 .../net/ethernet/cavium/octeontx-83xx/pkopf_main.c | 101 ++++++++++++++-------
 .../net/ethernet/cavium/octeontx-83xx/ssopf_main.c |  44 +++------
 4 files changed, 109 insertions(+), 81 deletions(-)

diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
index b43b181fc789..7481bcff8f95 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/octeontx_main.c
@@ -70,8 +70,8 @@ struct octtx_domain {
 	u64 aura_set;
 	u64 grp_mask;
 
-	int num_bgx_ports;
-	int num_lbk_ports;
+	int bgx_count;
+	int lbk_count;
 	struct octtx_bgx_port bgx_port[OCTTX_MAX_BGX_PORTS];
 	struct octtx_lbk_port lbk_port[OCTTX_MAX_LBK_PORTS];
 
@@ -272,8 +272,22 @@ static int octtx_master_receive_message(struct mbox_hdr *hdr,
 		timpf->receive_message(0, domain->domain_id, hdr,
 				req, resp, add_data);
 		break;
-	case SSOW_COPROC:
 	case SSO_COPROC:
+		if (hdr->msg == SSO_GETDOMAINCFG) {
+			struct dcfg_resp *dcfg = add_data;
+
+			dcfg->sso_count = domain->sso_vf_count;
+			dcfg->ssow_count = domain->ssow_vf_count;
+			dcfg->fpa_count = domain->fpa_vf_count;
+			dcfg->pko_count = domain->pko_vf_count;
+			dcfg->tim_count = domain->tim_vf_count;
+			dcfg->net_port_count = domain->bgx_count;
+			dcfg->virt_port_count = domain->lbk_count;
+			resp->data = sizeof(struct dcfg_resp);
+			hdr->res_code = MBOX_RET_SUCCESS;
+			break;
+		}
+	case SSOW_COPROC:
 	default:
 		dev_err(octtx_device, "invalid mbox message\n");
 		hdr->res_code = MBOX_RET_INVALID;
@@ -417,8 +431,8 @@ int octeontx_create_domain(const char *name, int type,
 	 * virt1: transferring packets between PKO/PKI and NIC (LBK1 + LBK2).
 	 * NOTE: The domain specification validity should be done here.
 	 */
-	domain->num_lbk_ports = lbk_count;
-	for (i = 0; i < domain->num_lbk_ports; i++) {
+	domain->lbk_count = lbk_count;
+	for (i = 0; i < domain->lbk_count; i++) {
 		domain->lbk_port[i].domain_id = domain_id;
 		domain->lbk_port[i].dom_port_idx = i;
 		domain->lbk_port[i].glb_port_idx = lbk_port[i];
@@ -443,8 +457,8 @@ int octeontx_create_domain(const char *name, int type,
 	 * given to this domain, except port 0, which is under
 	 * Linux, hosting the dataplane application, control.
 	 */
-	domain->num_bgx_ports = bgx_count;
-	for (i = 0; i < domain->num_bgx_ports; i++) {
+	domain->bgx_count = bgx_count;
+	for (i = 0; i < domain->bgx_count; i++) {
 		domain->bgx_port[i].domain_id = domain_id;
 		domain->bgx_port[i].dom_port_idx = i;
 		domain->bgx_port[i].glb_port_idx = bgx_port[i];
@@ -456,7 +470,7 @@ int octeontx_create_domain(const char *name, int type,
 		goto error;
 	}
 	/* Now that we know which exact ports we have, set pkinds for them. */
-	for (i = 0; i < domain->num_bgx_ports; i++) {
+	for (i = 0; i < domain->bgx_count; i++) {
 		ret = pki->add_bgx_port(node, domain_id, &domain->bgx_port[i]);
 		if (ret < 0) {
 			dev_err(octtx_device,
@@ -482,8 +496,6 @@ int octeontx_create_domain(const char *name, int type,
 		goto error;
 	}
 	/* remove this once PKO init extends for LBK. */
-	lbk_count = 0;
-
 	domain->pko_vf_count = bgx_count + lbk_count;
 	if (domain->pko_vf_count != pko_count) {
 		dev_err(octtx_device,
@@ -492,7 +504,8 @@ int octeontx_create_domain(const char *name, int type,
 		dev_err(octtx_device, " proceeding with proper value..\n");
 	}
 	ret = pkopf->create_domain(node, domain_id, domain->pko_vf_count,
-				domain->bgx_port,
+				domain->bgx_port, domain->bgx_count,
+				domain->lbk_port, domain->lbk_count,
 				&octtx_master_com, domain,
 				&octtx_device->kobj, domain->name);
 	if (ret) {
@@ -627,7 +640,7 @@ static void poll_for_link(struct work_struct *work)
 		if (!domain->setup)
 			continue;
 
-		for (i = 0; i < domain->num_bgx_ports; i++) {
+		for (i = 0; i < domain->bgx_count; i++) {
 			node = domain->bgx_port[i].node;
 			bgx_idx = domain->bgx_port[i].bgx;
 			lmac = domain->bgx_port[i].lmac;
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pko.h b/drivers/net/ethernet/cavium/octeontx-83xx/pko.h
index 400d3015035d..160176bde905 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pko.h
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pko.h
@@ -280,8 +280,6 @@
 
 struct pkopf_vf {
 	struct octeontx_pf_vf	domain;
-	u32			bgx_mask;
-	u32			bgx_lmac;
 };
 
 struct pkopf {
@@ -306,9 +304,11 @@ struct pkopf {
 };
 
 struct pkopf_com_s {
-	int (*create_domain)(u32, u16, u32, struct octtx_bgx_port *port,
+	int (*create_domain)(u32 id, u16 domain_id, u32 pko_vf_count,
+			     struct octtx_bgx_port *bgx_port, int bgx_count,
+			     struct octtx_lbk_port *lbk_port, int lbk_count,
 			     void *master, void *master_data,
-				struct kobject *kobj, char *g_name);
+			     struct kobject *kobj, char *g_name);
 	int (*free_domain)(u32, u16);
 	int (*reset_domain)(u32, u16);
 	int (*receive_message)(u32, u16 domain_id,
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
index 224513485ad2..787abcfb3c40 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/pkopf_main.c
@@ -17,6 +17,17 @@
 #define DRV_NAME "octeontx-pko"
 #define DRV_VERSION "0.1"
 
+/* PKO MAC type (enumerated by PKO_LMAC_E) */
+#define PKO_MAC_LBK	0
+#define PKO_MAC_BGX	1
+#define PKO_MAC_DPI	2
+
+#define LBK_CHAN_BASE	0x0
+#define LBK_CHAN_RANGE	BIT(8)
+
+#define BGX_CHAN_BASE	0x800
+#define BGX_CHAN_RANGE	BIT(8)
+
 static atomic_t pko_count = ATOMIC_INIT(0);
 static DEFINE_SPINLOCK(octeontx_pko_devices_lock);
 static LIST_HEAD(octeontx_pko_devices);
@@ -44,18 +55,30 @@ static u64 pko_reg_read(struct pkopf *pko, u64 offset)
 	return readq_relaxed(pko->reg_base + offset);
 }
 
-static int pko_get_bgx_channel(int bgx, int lmac, int chan)
+static int pko_get_bgx_chan(int bgx, int lmac, int chan)
 {
-	//NOTE: this is highly 83xx pki centric
-	return 0x800 + (0x100 * bgx) + (0x10 * lmac) + chan;
+	return BGX_CHAN_BASE + (BGX_CHAN_RANGE * bgx) + (0x10 * lmac) + chan;
 }
 
 static int pko_get_bgx_mac(int bgx, int lmac)
 {
-	//NOTE: this is highly 83xx pko centric
+	/* 3 = PKO BGX base MAC, 0x4 = number of MACs used by BGX. */
 	return 3 + (0x4 * bgx) + lmac;
 }
 
+static int pko_get_lbk_chan(int lbk, int chan)
+{
+	return LBK_CHAN_BASE + (LBK_CHAN_RANGE * lbk) + chan;
+}
+
+static int pko_get_lbk_mac(int lbk)
+{
+	/* Only LBK0 and LBK2 are connected to PKO, which are mapped
+	 * to PKO MAC as follows: LBK0 => MAC0, LBK2 => MAC1.
+	 */
+	return (lbk) ? 1 : 0;
+}
+
 int pkopf_master_send_message(struct mbox_hdr *hdr,
 			      union mbox_data *req,
 			      union mbox_data *resp,
@@ -273,18 +296,19 @@ static void pko_pf_gmctl_init(struct pkopf *pf, int vf, u16 gmid)
 	reg = pko_reg_read(pf, PKO_PF_VFX_GMCTL(vf));
 }
 
-static int pko_pf_create_domain(u32 id, u16 domain_id, u32 num_dqs,
-				struct octtx_bgx_port *port, void *master,
-				void *master_data, struct kobject *kobj,
-				char *g_name)
+static int pko_pf_create_domain(u32 id, u16 domain_id, u32 pko_vf_count,
+				struct octtx_bgx_port *bgx_port, int bgx_count,
+				struct octtx_lbk_port *lbk_port, int lbk_count,
+				void *master, void *master_data,
+				struct kobject *kobj, char *g_name)
 {
 	struct pkopf *pko = NULL;
 	struct pkopf *curr;
-	u64 i;
-	int vf_idx = 0;
+	int i, pko_mac = PKO_MAC_BGX;
+	int vf_idx = 0, port_idx = 0;
 	resource_size_t vf_start;
 	int mac_num, mac_mode, chan;
-	const u32 max_frame = 0xffff; // FIXME: consider new pko domain param
+	const u32 max_frame = 0xffff;
 	struct pci_dev *virtfn;
 
 	if (!kobj || !g_name)
@@ -324,44 +348,55 @@ static int pko_pf_create_domain(u32 id, u16 domain_id, u32 num_dqs,
 			if (!pko->vf[i].domain.reg_base)
 				break;
 
-			pko->vf[i].bgx_mask = port[vf_idx].bgx;
-			pko->vf[i].bgx_lmac = port[vf_idx].lmac;
-
 			virtfn = pci_get_domain_bus_and_slot(pci_domain_nr(
 					pko->pdev->bus),
 					pci_iov_virtfn_bus(pko->pdev, i),
 					pci_iov_virtfn_devfn(pko->pdev, i));
 			if (!virtfn)
 				break;
-			sysfs_add_link_to_group(kobj, g_name,
-						&virtfn->dev.kobj,
-				virtfn->dev.kobj.name);
+
+			sysfs_add_link_to_group(kobj, g_name, &virtfn->dev.kobj,
+						virtfn->dev.kobj.name);
 
 			identify(&pko->vf[i], domain_id, vf_idx);
 			pko_pf_gmctl_init(pko, i, get_gmid(domain_id));
 
 			/* Setup the PKO Scheduling tree: PQ/SQ/DQ.
-			 * NOTE: mac_num is enumerated by PKO_LMAC_E.
-			 * TODO.1: Distinguish BGX and LBK ports.
-			 * Currently -- for BGX only.
 			 */
-			mac_num = pko_get_bgx_mac(pko->vf[i].bgx_mask,
-						  pko->vf[i].bgx_lmac);
-			chan = pko_get_bgx_channel(pko->vf[i].bgx_mask,
-						   pko->vf[i].bgx_lmac, 0);
-			mac_mode = port[vf_idx].lmac_type;
-
+			if (pko_mac == PKO_MAC_BGX) {
+				mac_num = pko_get_bgx_mac(
+						bgx_port[port_idx].bgx,
+						bgx_port[port_idx].lmac);
+				chan = pko_get_bgx_chan(
+						bgx_port[port_idx].bgx,
+						bgx_port[port_idx].lmac, 0);
+				mac_mode = bgx_port[port_idx].lmac_type;
+				port_idx++;
+				if (port_idx >= bgx_count) {
+					pko_mac = PKO_MAC_LBK;
+					port_idx = 0;
+				}
+			} else if (pko_mac == PKO_MAC_LBK) {
+				mac_num = pko_get_lbk_mac(
+						lbk_port[port_idx].olbk);
+				chan = pko_get_lbk_chan(
+						lbk_port[port_idx].olbk, 0);
+				mac_mode = 0;
+				port_idx++;
+			} else {
+				break;
+			}
 			pko_pstree_setup(pko, i, max_frame,
 					 mac_num, mac_mode, chan);
 			vf_idx++;
-			if (vf_idx == num_dqs) {
-				pko->vfs_in_use += num_dqs;
+			if (vf_idx == pko_vf_count) {
+				pko->vfs_in_use += pko_vf_count;
 				break;
 			}
 		}
 	}
 
-	if (vf_idx != num_dqs) {
+	if (vf_idx != pko_vf_count) {
 		pko_pf_remove_domain(id, domain_id);
 		return -ENODEV;
 	}
@@ -743,16 +778,13 @@ static void pko_lX_set_shape(struct pkopf *pko, int level, int q, u64 reg)
 }
 
 static int pko_sq_init(struct pkopf *pko, int vf, int level, u32 channel,
-		       u32 max_frame, int parent_sq)
+		       int mac_num, u32 max_frame, int parent_sq)
 {
-	int mac_num;
 	int queue;
 	int channel_level;
 	int queue_base;
 	u64 reg;
 
-	mac_num = pko_get_bgx_mac(pko->vf[vf].bgx_mask, pko->vf[vf].bgx_lmac);
-
 	queue = pko_lX_get_queue(pko, level);
 	channel_level = pko_reg_read(pko, PKO_PF_CHANNEL_LEVEL);
 	channel_level += 2;
@@ -820,7 +852,8 @@ static int pko_pstree_setup(struct pkopf *pko, int vf, u32 max_frame,
 
 	err = mac_num;
 	for (lvl = 2; lvl <= pko->max_levels; lvl++)
-		err = pko_sq_init(pko, vf, lvl, channel, max_frame, err);
+		err = pko_sq_init(pko, vf, lvl, channel, mac_num,
+				  max_frame, err);
 
 	err = pko_dq_init(pko, vf);
 	if (err)
diff --git a/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c b/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
index 99fbff1be6f0..0101d95292ce 100644
--- a/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
+++ b/drivers/net/ethernet/cavium/octeontx-83xx/ssopf_main.c
@@ -617,26 +617,6 @@ static int handle_mbox_msg_from_sso_vf(struct ssopf *sso,
 		hdr->res_code = MBOX_RET_SUCCESS;
 		ret = 0;
 		break;
-	case SSO_GETDOMAINCFG:
-		/* This is temp, this will be moved to octeontx*/
-		hdr->res_code = MBOX_RET_SUCCESS;
-		resp->cfg.sso_count = 1;
-		resp->cfg.ssow_count = 32;
-		resp->cfg.fpa_count = 1;
-		resp->cfg.pko_count = 1;
-		resp->cfg.tim_count = 0;
-		/* Note:
-		 * - remove above resp-> value update and always
-		 * use add_data for resp message
-		 * - above resp-> update gonna become redundent as
-		 *   because coming patch will get rid of *resp param
-		 *   from function
-		 */
-		memcpy(add_data, resp, sizeof(*resp));
-		resp->data = sizeof(*resp);
-		ret = 0;
-		break;
-
 	case SSO_GET_DEV_INFO:
 		get_dev_info = add_data;
 
@@ -759,17 +739,19 @@ static void handle_mbox_msg_from_vf(struct ssopf *sso, int vf_idx)
 	resp.data = 0;
 	switch (hdr.coproc) {
 	case SSO_COPROC:
-		memcpy(&req, ram_mbox_buf, sizeof(req));
-		ret = handle_mbox_msg_from_sso_vf(
-			sso, sso->vf[vf_idx].domain.domain_id,
-			&hdr,
-			&req /* Unused for sso */,
-			&resp,
-			ram_mbox_buf);
-		/* prep for replymsg */
-		replymsg = ram_mbox_buf;
-		replysize = resp.data;
-		break;
+		if (hdr.msg != SSO_GETDOMAINCFG) {
+			memcpy(&req, ram_mbox_buf, sizeof(req));
+			ret = handle_mbox_msg_from_sso_vf(
+				sso, sso->vf[vf_idx].domain.domain_id,
+				&hdr,
+				&req /* Unused for sso */,
+				&resp,
+				ram_mbox_buf);
+			/* prep for replymsg */
+			replymsg = ram_mbox_buf;
+			replysize = resp.data;
+			break;
+		}
 	default:
 		/* call octtx_master_receive_message for msg dispatch */
 		ret = sso->vf[vf_idx].domain.master->receive_message(
-- 
2.14.1

